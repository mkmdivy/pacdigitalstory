{"version":3,"sources":["Site.module.css","App.js","index.js"],"names":["module","exports","App","props","location","useLocation","console","log","history","useHistory","queryoption","queryoptionvar","queryparse","search","queryString","parse","country","push","value","label","map","e","queryparsevar","type","colorBasket","useState","setSelectedOption","selectedOptionvar","setSelectedOptionvar","countrylist","d","filteredData","data","filter","includes","selectedData","sbin","renderLineChart","height","width","margin","top","right","left","bottom","strokeDasharray","dataKey","cursor","strokeWidth","content","active","payload","className","classes","Tooltip","i","idx","key","style","color","marginLeft","marginRight","Math","round","language","fill","class","main","header","box","options","isMulti","onChange","newCountries","pathname","stringify","handleChange","optionsvariable","handleChangevar","Layout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d5e292b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Site_Layout__3hNKN\",\"keybutton\":\"Site_keybutton__2wcdQ\",\"header\":\"Site_header__3iCbW\",\"title\":\"Site_title__15UGb\",\"box\":\"Site_box__3XuyM\",\"main\":\"Site_main__1pLwv\",\"TableHeader\":\"Site_TableHeader__2WUPl\",\"button\":\"Site_button__3quVG\",\"TableSearch\":\"Site_TableSearch__2iwvs\",\"mapContainer\":\"Site_mapContainer__2wsmZ\",\"mapContainerhidden\":\"Site_mapContainerhidden__1-Gkx\",\"topleft\":\"Site_topleft__1TmI1\",\"legend\":\"Site_legend__36Hn8\",\"table\":\"Site_table__Io4Wi\",\"Tooltip\":\"Site_Tooltip__23Pjg\",\"regionsel\":\"Site_regionsel__2Cpxq\",\"popup\":\"Site_popup__2JwWg\",\"logo\":\"Site_logo__1xyQV\",\"buttondist\":\"Site_buttondist__1BltH\",\"buttonActive\":\"Site_buttonActive__3StoQ\",\"buttonW\":\"Site_buttonW__3jUWC\",\"buttonV\":\"Site_buttonV__2R9sk\",\"buttonA\":\"Site_buttonA__22eo7\",\"buttonR\":\"Site_buttonR__1BIBG\",\"tooltip\":\"Site_tooltip__1Ut4m\"};","import React, { useState, useRef, useEffect } from 'react';\r\nimport Select from 'react-select'\r\nimport './index.css';\r\nimport data from './data.json';\r\nimport optionsvariable from './optionvariable.json';\r\nimport options from './option.json';\r\nimport wordlist from './wordlist.json';\r\nimport classes from './Site.module.css';\r\nimport { Badge, Chip } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StackGrid from \"react-stack-grid\";\r\nimport { Web, Videocam, Description, PictureAsPdf} from '@material-ui/icons';\r\nimport ReactGA from 'react-ga';\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport queryString from \"query-string\";\r\nimport { useLocation, useParams, useHistory } from 'react-router';\r\n\r\n\r\n\r\nconst App = props => {\r\n\r\nconst location = useLocation()\r\nconsole.log(location)\r\n\r\nconst history = useHistory()\r\nconsole.log(history)\r\n\r\n\r\nconst queryoption =[]\r\nconst queryoptionvar =[]\r\n\r\n\r\nconst queryparse = location.search===\"\"?  \"Angola\" : queryString.parse(location.search).country \r\ntypeof queryparse==='string'? queryoption.push({value:queryparse,label:queryparse}) : queryparse.map(e => queryoption.push({value:e,label:e}))  \r\nconsole.log(queryoption)\r\n\r\nconst queryparsevar = location.search===\"\"?  ['Education completed in single years'] : queryString.parse(location.search).type\r\nqueryoptionvar.push({value:queryparsevar,label:queryparsevar})\r\n\r\n\r\n\r\n\r\nconst locale = \"en\"\r\n\r\nconst colorBasket = [\r\n  \"rgb(246,186,112)\",\r\n  \"rgb(42,79,95)\",  \r\n  \"rgb(67,107,101)\",\r\n  \"rgb(133,163,147)\",    \r\n  \"rgb(197,209,191)\",\r\n  \"rgb(246,186,112)\",\r\n  \"rgb(42,79,95)\",  \r\n  \"rgb(67,107,101)\",\r\n  \"rgb(133,163,147)\",    \r\n  \"rgb(197,209,191)\",\r\n  \"rgb(246,186,112)\",\r\n  \"rgb(42,79,95)\",  \r\n  \"rgb(67,107,101)\",\r\n  \"rgb(133,163,147)\",    \r\n  \"rgb(197,209,191)\",\r\n  ];  \r\n\r\n// const colorBasket = [\r\n//   \"#016FB9\",\r\n//   \"#2D9E48\",    \r\n//   \"#a70000\",\r\n//   \"#EC4E20\",\r\n//   \"#353531\",\r\n//   \"#FF9505\",    \r\n//   \"#D5E0C8\",\r\n//   \"#A36E52\",\r\n//   \"#D5C73E\",\r\n//   \"#D0AACF\",  \r\n//   \"#7F97BC\",\r\n//   \"#68D7DA\",\r\n//   ];  \r\n\r\n\r\nconst [selectedOption, setSelectedOption] = useState([{value: 'Angola', label: 'Angola'}]);\r\nconst [selectedOptionvar, setSelectedOptionvar] = useState({value: 'Education completed in single years', label: 'Education completed in single years'});\r\nconst countrylist = []\r\n\r\n\r\nqueryoption.map(d=>countrylist.push(d.value))\r\n\r\nconst filteredData = data.filter(d => countrylist.includes(d.country))\r\nconst selectedData = [\r\n  {sbin:0,label:'Rural'},\r\n  {sbin:10,label:'10,000 - 50,000'},\r\n  {sbin:50,label:'50,000 - 250,000'},\r\n  {sbin:250,label:'250,000 - 1,000,000'},\r\n  {sbin:1000,label:'1,000,000+'},\r\n]\r\n\r\nfilteredData.map(d=>\r\n  selectedData.map(e => \r\n    e.sbin === d.sbin? e[d.country]=d[selectedOptionvar.value] : null\r\n    )\r\n  )\r\n\r\n\r\n\r\n\r\nconst renderTooltip = (props) => {\r\n  if (props.active && props.payload !== null && props.payload[0] !== null) {\r\n    let payload = props.payload[0].payload;\r\n    let tooltip = null;\r\n    \r\n          tooltip = selectedOptionvar.value==='Education completed in single years'? (\r\n            <div className={classes.Tooltip}>            \r\n              {props.payload.map((i, idx) => (\r\n                <p\r\n                  key={idx}\r\n                  style={{\r\n                    color: i.color,\r\n                    marginLeft: \"10px\",\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  {i.dataKey}: {Math.round(i.value * 100) / 100} years\r\n                </p>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className={classes.Tooltip}>            \r\n              {props.payload.map((i, idx) => (\r\n                <p\r\n                  key={idx}\r\n                  style={{\r\n                    color: i.color,\r\n                    marginLeft: \"10px\",\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  {i.dataKey}: {Math.round(i.value * 1000) / 10}%\r\n                </p>\r\n              ))}\r\n            </div>\r\n          );\r\n        \r\n\r\n    return tooltip;\r\n  }\r\n}\r\n\r\n\r\nconst renderLineChart = (\r\n<ResponsiveContainer  height={600}>\r\n  <BarChart\r\n  width={1000}\r\n  height={600}\r\n  data={selectedData}\r\n  margin={{\r\n    top: 5,\r\n    right: 30,\r\n    left: 20,\r\n    bottom: 5,\r\n  }}\r\n>\r\n  <CartesianGrid strokeDasharray=\"3 3\" />\r\n  <XAxis dataKey=\"label\" />\r\n  <YAxis />\r\n  <Tooltip\r\n      cursor={{ strokeWidth: 0 }}\r\n      content={renderTooltip}      \r\n      language={locale} />\r\n  <Legend />  \r\n  {countrylist.map((d,e) => \r\n    <Bar dataKey={d} fill={colorBasket[e]}  />\r\n  )}\r\n  \r\n  {/* <Bar dataKey=\"uv\" fill=\"#82ca9d\" /> */}\r\n</BarChart>\r\n</ResponsiveContainer>\r\n);\r\n\r\n  \r\nreturn (\r\n<div class={classes.main}>\r\n  <div class={classes.header}>      \r\n    <div class={classes.box}>\r\n    <Select \r\n    // styles={customStyles}\r\n    options={options} \r\n    isMulti \r\n    value={queryoption}\r\n    onChange={ (e,d) => handleChange(e,d,history, setSelectedOption,queryparsevar)\r\n      // e => pushQuery(history,{country:e[1].value})\r\n      // setSelectedOption\r\n     \r\n    }\r\n    /></div>    \r\n        <div class={classes.box}>\r\n    <Select \r\n    // styles={customStyles}\r\n    options={optionsvariable} \r\n    // // isMulti \r\n    value={queryoptionvar}\r\n    onChange={ (e,d) => handleChangevar(e,d,history, setSelectedOptionvar,queryparse)    \r\n    }\r\n    /></div>    \r\n\r\n  </div>\r\n  <div class={classes.Layout}>{renderLineChart}</div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\nfunction handleChange(e, d, history, setSelectedOption,queryparsevar) {\r\n  if (e === null) {\r\n    return;\r\n  } else {\r\n    setSelectedOption(e)\r\n    const newCountries = e.map(d => d.value);       \r\n    // pushQuery(history, { country: newCountries });\r\n    history.push({\r\n        pathname: history.pathname,\r\n        search: queryString.stringify({country:newCountries,type:queryparsevar})  \r\n    })\r\n}\r\n}\r\n\r\n\r\nfunction handleChangevar(e, d, history, setSelectedOptionvar,queryparse) {\r\n  if (e === null) {\r\n    return;\r\n  } else {\r\n    setSelectedOptionvar(e)\r\n    // pushQuery(history, { country: newCountries });\r\n    history.push({\r\n        pathname: history.pathname,\r\n        search: queryString.stringify({country:queryparse,type:e.value})  \r\n    })\r\n}\r\n}\r\n\r\n// function pushQuery(history, incomingQuery){\r\n  \r\n//   const incomingQueryKey = Object.keys(incomingQuery)[0];\r\n//   const prevQuery = queryString.parse(history.location.search, {\r\n//     arrayFormat: \"comma\",\r\n//     parseNumbers: true,\r\n//   });\r\n\r\n//   prevQuery[incomingQueryKey] = incomingQuery[incomingQueryKey];\r\n\r\n//   const newQueries = queryString.stringify(prevQuery, {\r\n//     skipEmptyString: true,\r\n//     arrayFormat: \"comma\",\r\n//     parseNumbers: true,\r\n//   });\r\n\r\n//   return history.push({\r\n//   pathname: history.pathname,\r\n//   search: `?${newQueries}`,\r\n// })\r\n// }\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(    \r\n<BrowserRouter>\r\n    <App />\r\n</BrowserRouter>,\r\n document.getElementById('app'));\r\n"],"sourceRoot":""}