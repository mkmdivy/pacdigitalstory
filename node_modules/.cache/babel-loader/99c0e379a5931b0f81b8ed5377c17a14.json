{"ast":null,"code":"var createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody; // InlineTransform: getVectorCode\n\nmodule.exports.getVectorCode = getVectorCode; // InlineTransform: getBodyCode\n\nmodule.exports.getBodyCode = getBodyCode; // InlineTransformExport: module.exports = function() { return Body; }\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  var code = generateCreateBodyFunctionBody(dimension, debugSetters);\n\n  var _Function = new Function(code)(),\n      Body = _Function.Body;\n\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  var code = \"\\n\".concat(getVectorCode(dimension, debugSetters), \"\\n\").concat(getBodyCode(dimension, debugSetters), \"\\nreturn {Body: Body, Vector: Vector};\\n\");\n  return code;\n}\n\nfunction getBodyCode(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var variableList = pattern('{var}', {\n    join: ', '\n  });\n  return \"\\nfunction Body(\".concat(variableList, \") {\\n  this.isPinned = false;\\n  this.pos = new Vector(\").concat(variableList, \");\\n  this.force = new Vector();\\n  this.velocity = new Vector();\\n  this.mass = 1;\\n\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.reset = function() {\\n  this.force.reset();\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.setPosition = function (\").concat(variableList, \") {\\n  \").concat(pattern('this.pos.{var} = {var} || 0;', {\n    indent: 2\n  }), \"\\n};\");\n}\n\nfunction getVectorCode(dimension, debugSetters) {\n  var pattern = createPatternBuilder(dimension);\n  var setters = '';\n\n  if (debugSetters) {\n    setters = \"\".concat(pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\"));\n  }\n\n  var variableList = pattern('{var}', {\n    join: ', '\n  });\n  return \"function Vector(\".concat(variableList, \") {\\n  \").concat(setters, \"\\n    if (typeof arguments[0] === 'object') {\\n      // could be another vector\\n      let v = arguments[0];\\n      \").concat(pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {\n    indent: 4\n  }), \"\\n      \").concat(pattern('this.{var} = v.{var};', {\n    indent: 4\n  }), \"\\n    } else {\\n      \").concat(pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {\n    indent: 4\n  }), \"\\n    }\\n  }\\n  \\n  Vector.prototype.reset = function () {\\n    \").concat(pattern('this.{var} = ', {\n    join: ''\n  }), \"0;\\n  };\");\n}","map":{"version":3,"sources":["C:/networkproj/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js"],"names":["createPatternBuilder","require","module","exports","generateCreateBodyFunction","generateCreateBodyFunctionBody","getVectorCode","getBodyCode","dimension","debugSetters","code","Function","Body","pattern","variableList","join","indent","setters"],"mappings":"AACA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,0BAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,8BAAf,GAAgDA,8BAAhD,C,CAEA;;AACAH,MAAM,CAACC,OAAP,CAAeG,aAAf,GAA+BA,aAA/B,C,CACA;;AACAJ,MAAM,CAACC,OAAP,CAAeI,WAAf,GAA6BA,WAA7B,C,CACA;;AAEA,SAASH,0BAAT,CAAoCI,SAApC,EAA+CC,YAA/C,EAA6D;AAC3D,MAAIC,IAAI,GAAGL,8BAA8B,CAACG,SAAD,EAAYC,YAAZ,CAAzC;;AAD2D,kBAE7C,IAAIE,QAAJ,CAAaD,IAAb,CAAD,EAF8C;AAAA,MAEtDE,IAFsD,aAEtDA,IAFsD;;AAG3D,SAAOA,IAAP;AACD;;AAED,SAASP,8BAAT,CAAwCG,SAAxC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAIC,IAAI,eACRJ,aAAa,CAACE,SAAD,EAAYC,YAAZ,CADL,eAERF,WAAW,CAACC,SAAD,EAAYC,YAAZ,CAFH,6CAAR;AAKA,SAAOC,IAAP;AACD;;AAED,SAASH,WAAT,CAAqBC,SAArB,EAAgC;AAC9B,MAAIK,OAAO,GAAGb,oBAAoB,CAACQ,SAAD,CAAlC;AACA,MAAIM,YAAY,GAAGD,OAAO,CAAC,OAAD,EAAU;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAV,CAA1B;AACA,mCACcD,YADd,oEAGwBA,YAHxB,uTAkBuCA,YAlBvC,oBAmBED,OAAO,CAAC,8BAAD,EAAiC;AAACG,IAAAA,MAAM,EAAE;AAAT,GAAjC,CAnBT;AAqBD;;AAED,SAASV,aAAT,CAAuBE,SAAvB,EAAkCC,YAAlC,EAAgD;AAC9C,MAAII,OAAO,GAAGb,oBAAoB,CAACQ,SAAD,CAAlC;AACA,MAAIS,OAAO,GAAG,EAAd;;AACA,MAAIR,YAAJ,EAAkB;AAChBQ,IAAAA,OAAO,aAAMJ,OAAO,CAAC;;;;;;;;IAAD,CAAb,CAAP;AASD;;AAED,MAAIC,YAAY,GAAGD,OAAO,CAAC,OAAD,EAAU;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAV,CAA1B;AACA,mCAA0BD,YAA1B,oBACEG,OADF,iIAKMJ,OAAO,CAAC,wHAAD,EAA2H;AAACG,IAAAA,MAAM,EAAE;AAAT,GAA3H,CALb,qBAMMH,OAAO,CAAC,uBAAD,EAA0B;AAACG,IAAAA,MAAM,EAAE;AAAT,GAA1B,CANb,mCAQMH,OAAO,CAAC,qDAAD,EAAwD;AAACG,IAAAA,MAAM,EAAE;AAAT,GAAxD,CARb,6EAaIH,OAAO,CAAC,eAAD,EAAkB;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAlB,CAbX;AAeD","sourcesContent":["\nconst createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;\n\n// InlineTransform: getVectorCode\nmodule.exports.getVectorCode = getVectorCode;\n// InlineTransform: getBodyCode\nmodule.exports.getBodyCode = getBodyCode;\n// InlineTransformExport: module.exports = function() { return Body; }\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  let code = generateCreateBodyFunctionBody(dimension, debugSetters);\n  let {Body} = (new Function(code))();\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  let code = `\n${getVectorCode(dimension, debugSetters)}\n${getBodyCode(dimension, debugSetters)}\nreturn {Body: Body, Vector: Vector};\n`;\n  return code;\n}\n\nfunction getBodyCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let variableList = pattern('{var}', {join: ', '});\n  return `\nfunction Body(${variableList}) {\n  this.isPinned = false;\n  this.pos = new Vector(${variableList});\n  this.force = new Vector();\n  this.velocity = new Vector();\n  this.mass = 1;\n\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.reset = function() {\n  this.force.reset();\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.setPosition = function (${variableList}) {\n  ${pattern('this.pos.{var} = {var} || 0;', {indent: 2})}\n};`;\n}\n\nfunction getVectorCode(dimension, debugSetters) {\n  let pattern = createPatternBuilder(dimension);\n  let setters = '';\n  if (debugSetters) {\n    setters = `${pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\")}`;\n  }\n\n  let variableList = pattern('{var}', {join: ', '});\n  return `function Vector(${variableList}) {\n  ${setters}\n    if (typeof arguments[0] === 'object') {\n      // could be another vector\n      let v = arguments[0];\n      ${pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {indent: 4})}\n      ${pattern('this.{var} = v.{var};', {indent: 4})}\n    } else {\n      ${pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {indent: 4})}\n    }\n  }\n  \n  Vector.prototype.reset = function () {\n    ${pattern('this.{var} = ', {join: ''})}0;\n  };`;\n}"]},"metadata":{},"sourceType":"script"}