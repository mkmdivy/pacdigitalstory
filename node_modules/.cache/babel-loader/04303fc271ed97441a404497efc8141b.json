{"ast":null,"code":"var _jsxFileName = \"C:\\\\mapboxAndReact\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport axios from 'axios';\nimport papa from 'papaparse';\nimport csv2geojson from 'csv2geojson';\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 5,\n      lat: 0,\n      zoom: 3\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    }); //.map(e => e.join(\",\")).join(\"\\n\")\n\n    let agglos = axios.get('senegal.json').then(response => {\n      let result = response.data.Agglomerations[\"0\"];\n      console.log(Object.entries(result).map(e => e));\n    }); //console.log(agglos)\n    //let data = agglos.data.Agglomerations[0].Longlat;\n    //var marker = new mapboxgl.Marker();\n    // map.on('load', function() {\n    // // Add a source for the state polygons.\n    // map.addSource('states', {\n    // 'type': 'geojson',\n    // 'data':\n    // 'https://gist.githubusercontent.com/mkmdivy/044d7f9f13cc2ec22ba6b1751c3527a6/raw/9908322b5ac7915720fc98190f755f139bde8ff3/africa'\n    // });\n    //\n    // // Add a layer showing the state polygons.\n    // map.addLayer({\n    // 'id': 'NAME_EN',\n    // 'type': 'fill',\n    // 'source': 'states',\n    // 'paint': {\n    // 'fill-color': 'rgba(200, 100, 240, 0.4)',\n    // 'fill-outline-color': 'rgba(200, 100, 240, 1)'\n    // }\n    // });\n    //\n    // // When a click event occurs on a feature in the states layer, open a popup at the\n    // // location of the click, with description HTML from its properties.\n    // map.on('click', 'NAME_EN', function(e) {\n    // new mapboxgl.Popup()\n    // .setLngLat(e.lngLat)\n    // .setHTML(e.features[0].properties.NAME_EN)\n    // .addTo(map);\n    // makeGetRequest(e.features[0].properties.NAME_EN,1)\n    // });\n    //\n    // // Change the cursor to a pointer when the mouse is over the states layer.\n    // map.on('mouseenter', 'NAME_EN', function() {\n    // map.getCanvas().style.cursor = 'pointer';\n    // });\n    //\n    // // Change it back to a pointer when it leaves.\n    // map.on('mouseleave', 'NAME_EN', function() {\n    // map.getCanvas().style.cursor = '';\n    // });\n    // });\n    // /////// ******Add Africapolis\n    // map.on('load', function() {\n    //   // Add a circle layer with a vector source.\n    //   map.addLayer({\n    //     id: 'points-of-interest',\n    //     source: {\n    //       type: 'vector',\n    //       url: 'mapbox://mkmd.ck5qy6ole1xja2npflwvfk78l-2j015'\n    //     },\n    //     'source-layer': 'metropole',\n    //     type: 'circle',\n    //     paint: {\n    //       // Mapbox Style Specification paint properties\n    //     },\n    //     layout: {\n    //       // Mapbox Style Specification layout properties\n    //     }\n    //   });\n    //\n    // });\n    //axios.get('chad.json').then(response=>{console.log(response.data.Agglomerations[0].Longlat)})\n    //mkmd.ck5qy6ole1xja2npflwvfk78l-2j015\n\n    async function makeGetRequest() {\n      let covid = await axios.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'); //console.log(covid.data)\n\n      let covid_name = papa.parse(covid.data, {\n        header: true,\n        skipEmptyLines: true\n      }).data[\"0\"];\n      let covid_latest = Object.keys(covid_name)[Object.keys(covid_name).length - 1];\n      csv2geojson.csv2geojson(covid.data, {\n        latfield: 'Lat',\n        lonfield: 'Long',\n        delimiter: ',',\n        numericFields: covid_latest\n      }, function (err, data) {\n        //let covid_latest=Object.keys(data.features[0].properties)[Object.keys(data.features[0].properties).length-1]\n        let covid_array = data;\n        console.log(covid_array);\n        map.on('load', function () {\n          map.addSource('covid', {\n            type: 'geojson',\n            data: covid_array\n          });\n          map.addSource('africapolis_country', {\n            type: 'vector',\n            url: 'mapbox://mkmd.ck19bzbfg07z42tmz06bk8soe-6dzi4'\n          });\n          map.addLayer({\n            id: 'country',\n            source: 'africapolis_country',\n            type: 'fill',\n            'source-layer': 'AfricaContinent',\n            filter: [\"in\", \"ISO3\", \"BEN\", \"BFA\", \"CIV\", \"CPV\", \"GHA\", \"GIN\", \"GMB\", \"GNB\", \"LBR\", \"MLI\", \"NER\", \"NGA\", \"SEN\", \"SLE\", \"TGO\", \"TCD\", \"MRT\"],\n            paint: {\n              'fill-color': 'hsl(56, 96%, 67%)',\n              'fill-opacity': 0.5\n            }\n          });\n          map.addLayer({\n            'id': 'covid',\n            'type': 'circle',\n            'source': 'covid',\n            filter: ['in', 'Country/Region', \"Benin\", \"Burkina Faso\", \"Cabo Verde\", \"Chad\", \"Cote d'Ivoire\", \"Gambia\", \"Ghana\", \"Guinea\", \"Guinea-Bissau\", \"Liberia\", \"Mali\", \"Niger\", \"Nigeria\", \"Senegal\", \"Sierra Leone\", \"Togo\"],\n            'paint': {\n              'circle-color': ['step', ['get', covid_latest], '#51bbd6', 30, '#f1f075', 100, '#f28cb1'],\n              'circle-radius': ['step', ['get', covid_latest], 20, 100, 30, 750, 40]\n            }\n          });\n          map.addLayer({\n            id: 'covid-count',\n            type: 'symbol',\n            source: 'covid',\n            filter: ['in', 'Country/Region', \"Benin\", \"Burkina Faso\", \"Cabo Verde\", \"Chad\", \"Cote d'Ivoire\", \"Gambia\", \"Ghana\", \"Guinea\", \"Guinea-Bissau\", \"Liberia\", \"Mali\", \"Niger\", \"Nigeria\", \"Senegal\", \"Sierra Leone\", \"Togo\"],\n            layout: {\n              'text-field': \"{\" + covid_latest + \"}\",\n              'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n              'text-size': 12\n            }\n          }); //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\n        });\n      }); //let covid_array= papa.parse(covid.data,{header:true,skipEmptyLines:true}).data;\n      //var x;\n      //for (x in [3,5,25,32,33,35,47,48,84,85,87,96,99,101,104,105,118,119,122,125,143,149,153,157,164,165,173,174,189,194,200,201,204,209,211,213,215,230,231,235,241,243,244,254,255,256,258,261,262,263]){new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map)\n      //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\n      //}\n      //let res = await axios.get(country+'.json');\n      //console.log(res.data.Agglomerations);\n      //let data = res.data.Agglomerations[select].Longlat;\n      //new mapboxgl.Marker().setLngLat(data).addTo(map);\n      //marker.setLngLat(data)\n      //marker.addTo(map);\n    }\n\n    makeGetRequest(); //let agglos = axios.get('egypt.json');\n    //console.log(agglos)\n    //let data = agglos.data.Agglomerations[0].Longlat;\n    //var marker = new mapboxgl.Marker();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Application, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 17\n  }\n}), document.getElementById('app'));","map":{"version":3,"sources":["C:/mapboxAndReact/src/index.js"],"names":["React","ReactDOM","mapboxgl","axios","papa","csv2geojson","accessToken","Application","Component","constructor","props","state","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","agglos","get","then","response","result","data","Agglomerations","console","log","Object","entries","e","makeGetRequest","covid","covid_name","parse","header","skipEmptyLines","covid_latest","keys","length","latfield","lonfield","delimiter","numericFields","err","covid_array","addSource","type","url","addLayer","id","source","filter","paint","layout","render","el","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEAH,QAAQ,CAACI,WAAT,GAAuB,uFAAvB;;AACA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,CADM;AAEXC,MAAAA,GAAG,EAAE,CAFM;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKD;;AAIDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,GAAG,GAAG,IAAId,QAAQ,CAACe,GAAb,CAAiB;AAC3BC,MAAAA,SAAS,EAAE,KAAKC,YADW;AAE3BC,MAAAA,KAAK,EAAE,gDAFoB;AAG3BC,MAAAA,MAAM,EAAE,CAAC,KAAKV,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAHmB;AAI3BC,MAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG;AAJU,KAAjB,CAAZ;AAQAE,IAAAA,GAAG,CAACM,EAAJ,CAAO,MAAP,EAAe,MAAM;AACrB,WAAKC,QAAL,CAAc;AACdX,QAAAA,GAAG,EAAEI,GAAG,CAACQ,SAAJ,GAAgBZ,GAAhB,CAAoBa,OAApB,CAA4B,CAA5B,CADS;AAEdZ,QAAAA,GAAG,EAAEG,GAAG,CAACQ,SAAJ,GAAgBX,GAAhB,CAAoBY,OAApB,CAA4B,CAA5B,CAFS;AAGdX,QAAAA,IAAI,EAAEE,GAAG,CAACU,OAAJ,GAAcD,OAAd,CAAsB,CAAtB;AAHQ,OAAd;AAKC,KAND,EATkB,CAiBlB;;AACA,QAAIE,MAAM,GAAGxB,KAAK,CAACyB,GAAN,CAAU,cAAV,EAA0BC,IAA1B,CAA+BC,QAAQ,IAAE;AACpD,UAAIC,MAAM,GAAGD,QAAQ,CAACE,IAAT,CAAcC,cAAd,CAA6B,GAA7B,CAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAP,CAAeN,MAAf,EAAuBf,GAAvB,CAA2BsB,CAAC,IAAEA,CAA9B,CAAZ;AAGH,KALc,CAAb,CAlBkB,CAwBlB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACE,mBAAeC,cAAf,GAAgC;AAChC,UAAIC,KAAK,GAAG,MAAMrC,KAAK,CAACyB,GAAN,CAAU,wJAAV,CAAlB,CADgC,CAEhC;;AACA,UAAIa,UAAU,GAACrC,IAAI,CAACsC,KAAL,CAAWF,KAAK,CAACR,IAAjB,EAAsB;AAACW,QAAAA,MAAM,EAAC,IAAR;AAAaC,QAAAA,cAAc,EAAC;AAA5B,OAAtB,EAAyDZ,IAAzD,CAA8D,GAA9D,CAAf;AACA,UAAIa,YAAY,GAACT,MAAM,CAACU,IAAP,CAAYL,UAAZ,EAAwBL,MAAM,CAACU,IAAP,CAAYL,UAAZ,EAAwBM,MAAxB,GAA+B,CAAvD,CAAjB;AACA1C,MAAAA,WAAW,CAACA,WAAZ,CAAwBmC,KAAK,CAACR,IAA9B,EAAmC;AACrCgB,QAAAA,QAAQ,EAAE,KAD2B;AAErCC,QAAAA,QAAQ,EAAE,MAF2B;AAGrCC,QAAAA,SAAS,EAAE,GAH0B;AAIrCC,QAAAA,aAAa,EAACN;AAJuB,OAAnC,EAMN,UAASO,GAAT,EAAapB,IAAb,EAAkB;AAChB;AACI,YAAIqB,WAAW,GAACrB,IAAhB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYkB,WAAZ;AACFrC,QAAAA,GAAG,CAACM,EAAJ,CAAO,MAAP,EAAe,YAAW;AACxBN,UAAAA,GAAG,CAACsC,SAAJ,CAAc,OAAd,EAAuB;AACrBC,YAAAA,IAAI,EAAE,SADe;AAErBvB,YAAAA,IAAI,EAAEqB;AAFe,WAAvB;AAIArC,UAAAA,GAAG,CAACsC,SAAJ,CAAc,qBAAd,EAAqC;AAAEC,YAAAA,IAAI,EAAE,QAAR;AAAkBC,YAAAA,GAAG,EAAE;AAAvB,WAArC;AACAxC,UAAAA,GAAG,CAACyC,QAAJ,CAAa;AACPC,YAAAA,EAAE,EAAE,SADG;AAEPC,YAAAA,MAAM,EAAC,qBAFA;AAGPJ,YAAAA,IAAI,EAAE,MAHC;AAIP,4BAAe,iBAJR;AAKPK,YAAAA,MAAM,EAAC,CAAC,IAAD,EAAM,MAAN,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,EAA2C,KAA3C,EAAiD,KAAjD,EAAuD,KAAvD,EAA6D,KAA7D,EAAmE,KAAnE,EAAyE,KAAzE,EAA+E,KAA/E,EAAqF,KAArF,EAA2F,KAA3F,EAAiG,KAAjG,EAAuG,KAAvG,EAA6G,KAA7G,CALA;AAMPC,YAAAA,KAAK,EAAE;AACL,4BAAc,mBADT;AAEL,8BAAgB;AAFX;AANA,WAAb;AAWA7C,UAAAA,GAAG,CAACyC,QAAJ,CAAa;AACb,kBAAM,OADO;AAEb,oBAAQ,QAFK;AAGb,sBAAU,OAHG;AAIbG,YAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,gBAAP,EAAwB,OAAxB,EAAgC,cAAhC,EAA+C,YAA/C,EAA4D,MAA5D,EAAmE,eAAnE,EAAmF,QAAnF,EAA4F,OAA5F,EAAoG,QAApG,EAA6G,eAA7G,EAA6H,SAA7H,EAAuI,MAAvI,EAA8I,OAA9I,EAAsJ,SAAtJ,EAAgK,SAAhK,EAA0K,cAA1K,EAAyL,MAAzL,CAJK;AAKb,qBAAS;AACP,8BAAgB,CAClB,MADkB,EAElB,CAAC,KAAD,EAAQf,YAAR,CAFkB,EAGlB,SAHkB,EAIlB,EAJkB,EAKlB,SALkB,EAMlB,GANkB,EAOlB,SAPkB,CADT;AAUP,+BAAiB,CACnB,MADmB,EAEnB,CAAC,KAAD,EAAQA,YAAR,CAFmB,EAGnB,EAHmB,EAInB,GAJmB,EAKnB,EALmB,EAMnB,GANmB,EAOnB,EAPmB;AAVV;AALI,WAAb;AA2BA7B,UAAAA,GAAG,CAACyC,QAAJ,CAAa;AACbC,YAAAA,EAAE,EAAE,aADS;AAEbH,YAAAA,IAAI,EAAE,QAFO;AAGbI,YAAAA,MAAM,EAAE,OAHK;AAIbC,YAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,gBAAP,EAAwB,OAAxB,EAAgC,cAAhC,EAA+C,YAA/C,EAA4D,MAA5D,EAAmE,eAAnE,EAAmF,QAAnF,EAA4F,OAA5F,EAAoG,QAApG,EAA6G,eAA7G,EAA6H,SAA7H,EAAuI,MAAvI,EAA8I,OAA9I,EAAsJ,SAAtJ,EAAgK,SAAhK,EAA0K,cAA1K,EAAyL,MAAzL,CAJK;AAKbE,YAAAA,MAAM,EAAE;AACR,4BAAc,MAAIjB,YAAJ,GAAiB,GADvB;AAER,2BAAa,CAAC,qBAAD,EAAwB,uBAAxB,CAFL;AAGR,2BAAa;AAHL;AALK,WAAb,EA5CwB,CAuDtB;AACD,SAxDH;AAyDC,OAnEC,EALgC,CA0EhC;AACA;AACA;AACE;AACF;AAGA;AACA;AACA;AAEA;AACA;AACA;AACD;;AAEHN,IAAAA,cAAc,GAvLM,CAwLlB;AACA;AACA;AACA;AACD;;AAEDwB,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAEC,EAAE,IAAI,KAAK7C,YAAL,GAAoB6C,EAApC;AAAwC,MAAA,SAAS,EAAC,cAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAMD;;AAlNuC;;AAwN1C/D,QAAQ,CAAC8D,MAAT,eAAgB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAiCE,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAjC","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport papa from 'papaparse';\r\nimport csv2geojson from 'csv2geojson'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\r\nclass Application extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: 5,\r\n      lat: 0,\r\n      zoom: 3\r\n    };\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom\r\n    });\r\n\r\n\r\n    map.on('move', () => {\r\n    this.setState({\r\n    lng: map.getCenter().lng.toFixed(4),\r\n    lat: map.getCenter().lat.toFixed(4),\r\n    zoom: map.getZoom().toFixed(2)\r\n    });\r\n    });\r\n\r\n    //.map(e => e.join(\",\")).join(\"\\n\")\r\n    let agglos = axios.get('senegal.json').then(response=>{\r\n      let result = response.data.Agglomerations[\"0\"]\r\n      console.log(Object.entries(result).map(e=>e))\r\n\r\n\r\n  });\r\n    //console.log(agglos)\r\n    //let data = agglos.data.Agglomerations[0].Longlat;\r\n    //var marker = new mapboxgl.Marker();\r\n\r\n    // map.on('load', function() {\r\n    // // Add a source for the state polygons.\r\n    // map.addSource('states', {\r\n    // 'type': 'geojson',\r\n    // 'data':\r\n    // 'https://gist.githubusercontent.com/mkmdivy/044d7f9f13cc2ec22ba6b1751c3527a6/raw/9908322b5ac7915720fc98190f755f139bde8ff3/africa'\r\n    // });\r\n    //\r\n    // // Add a layer showing the state polygons.\r\n    // map.addLayer({\r\n    // 'id': 'NAME_EN',\r\n    // 'type': 'fill',\r\n    // 'source': 'states',\r\n    // 'paint': {\r\n    // 'fill-color': 'rgba(200, 100, 240, 0.4)',\r\n    // 'fill-outline-color': 'rgba(200, 100, 240, 1)'\r\n    // }\r\n    // });\r\n    //\r\n    // // When a click event occurs on a feature in the states layer, open a popup at the\r\n    // // location of the click, with description HTML from its properties.\r\n    // map.on('click', 'NAME_EN', function(e) {\r\n    // new mapboxgl.Popup()\r\n    // .setLngLat(e.lngLat)\r\n    // .setHTML(e.features[0].properties.NAME_EN)\r\n    // .addTo(map);\r\n    // makeGetRequest(e.features[0].properties.NAME_EN,1)\r\n    // });\r\n    //\r\n    // // Change the cursor to a pointer when the mouse is over the states layer.\r\n    // map.on('mouseenter', 'NAME_EN', function() {\r\n    // map.getCanvas().style.cursor = 'pointer';\r\n    // });\r\n    //\r\n    // // Change it back to a pointer when it leaves.\r\n    // map.on('mouseleave', 'NAME_EN', function() {\r\n    // map.getCanvas().style.cursor = '';\r\n    // });\r\n    // });\r\n\r\n\r\n\r\n    // /////// ******Add Africapolis\r\n    // map.on('load', function() {\r\n    //   // Add a circle layer with a vector source.\r\n    //   map.addLayer({\r\n    //     id: 'points-of-interest',\r\n    //     source: {\r\n    //       type: 'vector',\r\n    //       url: 'mapbox://mkmd.ck5qy6ole1xja2npflwvfk78l-2j015'\r\n    //     },\r\n    //     'source-layer': 'metropole',\r\n    //     type: 'circle',\r\n    //     paint: {\r\n    //       // Mapbox Style Specification paint properties\r\n    //     },\r\n    //     layout: {\r\n    //       // Mapbox Style Specification layout properties\r\n    //     }\r\n    //   });\r\n    //\r\n    // });\r\n\r\n    //axios.get('chad.json').then(response=>{console.log(response.data.Agglomerations[0].Longlat)})\r\n    //mkmd.ck5qy6ole1xja2npflwvfk78l-2j015\r\n      async function makeGetRequest() {\r\n      let covid = await axios.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')\r\n      //console.log(covid.data)\r\n      let covid_name=papa.parse(covid.data,{header:true,skipEmptyLines:true}).data[\"0\"];\r\n      let covid_latest=Object.keys(covid_name)[Object.keys(covid_name).length-1]\r\n      csv2geojson.csv2geojson(covid.data,{\r\n    latfield: 'Lat',\r\n    lonfield: 'Long',\r\n    delimiter: ',',\r\n    numericFields:covid_latest\r\n},\r\nfunction(err,data){\r\n  //let covid_latest=Object.keys(data.features[0].properties)[Object.keys(data.features[0].properties).length-1]\r\n      let covid_array=data\r\n      console.log(covid_array)\r\n    map.on('load', function() {\r\n      map.addSource('covid', {\r\n        type: 'geojson',\r\n        data: covid_array\r\n      });\r\n      map.addSource('africapolis_country', { type: 'vector', url: 'mapbox://mkmd.ck19bzbfg07z42tmz06bk8soe-6dzi4'});\r\n      map.addLayer({\r\n            id: 'country',\r\n            source:'africapolis_country',\r\n            type: 'fill',\r\n            'source-layer':'AfricaContinent',\r\n            filter:[\"in\",\"ISO3\",\"BEN\",\"BFA\",\"CIV\",\"CPV\",\"GHA\",\"GIN\",\"GMB\",\"GNB\",\"LBR\",\"MLI\",\"NER\",\"NGA\",\"SEN\",\"SLE\",\"TGO\",\"TCD\",\"MRT\"],\r\n            paint: {\r\n              'fill-color': 'hsl(56, 96%, 67%)',\r\n              'fill-opacity': 0.5\r\n            }\r\n        });\r\n      map.addLayer({\r\n      'id': 'covid',\r\n      'type': 'circle',\r\n      'source': 'covid',\r\n      filter: ['in', 'Country/Region',\"Benin\",\"Burkina Faso\",\"Cabo Verde\",\"Chad\",\"Cote d'Ivoire\",\"Gambia\",\"Ghana\",\"Guinea\",\"Guinea-Bissau\",\"Liberia\",\"Mali\",\"Niger\",\"Nigeria\",\"Senegal\",\"Sierra Leone\",\"Togo\"],\r\n      'paint': {\r\n        'circle-color': [\r\n      'step',\r\n      ['get', covid_latest],\r\n      '#51bbd6',\r\n      30,\r\n      '#f1f075',\r\n      100,\r\n      '#f28cb1'\r\n      ],\r\n        'circle-radius': [\r\n      'step',\r\n      ['get', covid_latest],\r\n      20,\r\n      100,\r\n      30,\r\n      750,\r\n      40\r\n      ]\r\n      }\r\n      });\r\n\r\n      map.addLayer({\r\n      id: 'covid-count',\r\n      type: 'symbol',\r\n      source: 'covid',\r\n      filter: ['in', 'Country/Region',\"Benin\",\"Burkina Faso\",\"Cabo Verde\",\"Chad\",\"Cote d'Ivoire\",\"Gambia\",\"Ghana\",\"Guinea\",\"Guinea-Bissau\",\"Liberia\",\"Mali\",\"Niger\",\"Nigeria\",\"Senegal\",\"Sierra Leone\",\"Togo\"],\r\n      layout: {\r\n      'text-field': \"{\"+covid_latest+\"}\",\r\n      'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n      'text-size': 12\r\n      }\r\n      });\r\n        //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\r\n      });\r\n    });\r\n\r\n      //let covid_array= papa.parse(covid.data,{header:true,skipEmptyLines:true}).data;\r\n      //var x;\r\n      //for (x in [3,5,25,32,33,35,47,48,84,85,87,96,99,101,104,105,118,119,122,125,143,149,153,157,164,165,173,174,189,194,200,201,204,209,211,213,215,230,231,235,241,243,244,254,255,256,258,261,262,263]){new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map)\r\n        //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\r\n      //}\r\n\r\n\r\n      //let res = await axios.get(country+'.json');\r\n      //console.log(res.data.Agglomerations);\r\n      //let data = res.data.Agglomerations[select].Longlat;\r\n\r\n      //new mapboxgl.Marker().setLngLat(data).addTo(map);\r\n      //marker.setLngLat(data)\r\n      //marker.addTo(map);\r\n    }\r\n\r\n  makeGetRequest()\r\n    //let agglos = axios.get('egypt.json');\r\n    //console.log(agglos)\r\n    //let data = agglos.data.Agglomerations[0].Longlat;\r\n    //var marker = new mapboxgl.Marker();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nReactDOM.render(<Application />, document.getElementById('app'));\r\n"]},"metadata":{},"sourceType":"module"}