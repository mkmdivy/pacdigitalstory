{"ast":null,"code":"var _jsxFileName = \"C:\\\\mapboxAndReact\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport axios from 'axios';\nimport Select from 'react-select'; //// Access token for Africapolis mapbox account\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA'; //// Basic setting of the map\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: null\n    };\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      }, () => {\n        // remove('agglomerations')\n        // add_country('agglomerations',this.state.selectedOption)\n        console.log(`Option selected:`, this.state.selectedOption);\n      });\n    };\n\n    this.state = {\n      lng: 5,\n      lat: 0,\n      zoom: 3\n    };\n  }\n\n  componentDidMount() {\n    //// Initial map setting\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\n      /// Select mapstyle from mapbox studio\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    }); //// Color setting\n\n    var agglomeration_fill_color = [\"step\", [\"get\", \"Population_2015\"], \"hsla(0, 0%, 8%, 0.5)\", 10000, \"hsla(55, 30%, 93%, 0.5)\", 30000, \"hsla(60, 100%, 90%, 0.5)\", 100000, \"hsla(98, 55%, 81%, 0.5)\", 300000, \"hsla(166, 44%, 65%, 0.5)\", 1000000, \"hsla(186, 53%, 51%, 0.5)\", 2000000, \"hsla(197, 74%, 43%, 0.5)\", 11847635, \"hsla(197, 74%, 43%, 0.5)\"];\n    var agglomeration_stroke_color = [\"step\", [\"get\", \"Population_2015\"], \"hsla(0, 0%, 8%, 1)\", 10000, \"hsla(55, 30%, 93%, 1)\", 30000, \"hsla(60, 100%, 90%, 1)\", 100000, \"hsla(98, 55%, 81%, 1)\", 300000, \"hsla(166, 44%, 65%, 1)\", 1000000, \"hsla(186, 53%, 51%, 1)\", 2000000, \"hsla(197, 74%, 43%, 1)\", 11847635, \"hsla(197, 74%, 43%, 1)\"]; //// Import Africapolis agglomerations from mapbox\n\n    map.on('load', function () {\n      map.addSource('africapolis_agglos', {\n        type: 'vector',\n        url: 'mapbox://mkmd.10cgedso'\n      });\n      map.addLayer({\n        id: 'agglomerations',\n        source: 'africapolis_agglos',\n        type: 'circle',\n        'source-layer': 'africapolis2020-1jc3vn',\n        filter: [\">\", \"Population_2015\", 0],\n        paint: {\n          'circle-stroke-color': agglomeration_stroke_color,\n          'circle-stroke-width': 3,\n          'circle-color': agglomeration_fill_color\n        }\n      });\n    }); ////\n\n    function remove(obj) {\n      map.removeLayer(obj);\n    }\n\n    function add_country(obj, country) {\n      map.addLayer({\n        id: 'agglomerations',\n        source: 'africapolis_agglos',\n        type: 'circle',\n        'source-layer': 'africapolis2020-1jc3vn',\n        filter: [\"==\", \"ISO3\", country],\n        paint: {\n          'circle-stroke-color': agglomeration_stroke_color,\n          'circle-stroke-width': 3,\n          'circle-color': agglomeration_fill_color\n        }\n      });\n    } //remove('agglomerations')\n    //add_country('agglomerations','NER')\n\n  }\n\n  render() {\n    const {\n      selectedOption\n    } = this.state;\n    const options = [{\n      value: \"Angola\",\n      label: \"AGO\"\n    }, {\n      value: \"Burundi\",\n      label: \"BDI\"\n    }, {\n      value: \"Benin\",\n      label: \"BEN\"\n    }, {\n      value: \"Burkina Faso\",\n      label: \"BFA\"\n    }, {\n      value: \"Botswana\",\n      label: \"BWA\"\n    }, {\n      value: \"Central African Republic\",\n      label: \"CAF\"\n    }, {\n      value: \"Cote d`Ivoire\",\n      label: \"CIV\"\n    }, {\n      value: \"Cameroon\",\n      label: \"CMR\"\n    }, {\n      value: \"Democratic Republic of the Congo\",\n      label: \"COD\"\n    }, {\n      value: \"Republic of the Congo\",\n      label: \"COG\"\n    }, {\n      value: \"Cabo Verde\",\n      label: \"CPV\"\n    }, {\n      value: \"Djibouti\",\n      label: \"DJI\"\n    }, {\n      value: \"Algeria\",\n      label: \"DZA\"\n    }, {\n      value: \"Egypt\",\n      label: \"EGY\"\n    }, {\n      value: \"Eritrea\",\n      label: \"ERI\"\n    }, {\n      value: \"Ethiopia\",\n      label: \"ETH\"\n    }, {\n      value: \"Gabon\",\n      label: \"GAB\"\n    }, {\n      value: \"Ghana\",\n      label: \"GHA\"\n    }, {\n      value: \"Guinea\",\n      label: \"GIN\"\n    }, {\n      value: \"The Gambia\",\n      label: \"GMB\"\n    }, {\n      value: \"Guinea-Bissau\",\n      label: \"GNB\"\n    }, {\n      value: \"Equatorial Guinea\",\n      label: \"GNQ\"\n    }, {\n      value: \"Kenya\",\n      label: \"KEN\"\n    }, {\n      value: \"Liberia\",\n      label: \"LBR\"\n    }, {\n      value: \"Libya\",\n      label: \"LBY\"\n    }, {\n      value: \"Lesotho\",\n      label: \"LSO\"\n    }, {\n      value: \"Morocco\",\n      label: \"MAR\"\n    }, {\n      value: \"Mali\",\n      label: \"MLI\"\n    }, {\n      value: \"Mozambique\",\n      label: \"MOZ\"\n    }, {\n      value: \"Mauritania\",\n      label: \"MRT\"\n    }, {\n      value: \"Malawi\",\n      label: \"MWI\"\n    }, {\n      value: \"Namibia\",\n      label: \"NAM\"\n    }, {\n      value: \"Niger\",\n      label: \"NER\"\n    }, {\n      value: \"Nigeria\",\n      label: \"NGA\"\n    }, {\n      value: \"Rwanda\",\n      label: \"RWA\"\n    }, {\n      value: \"Sudan\",\n      label: \"SDN\"\n    }, {\n      value: \"Senegal\",\n      label: \"SEN\"\n    }, {\n      value: \"Sierra Leone\",\n      label: \"SLE\"\n    }, {\n      value: \"Somalia\",\n      label: \"SOM\"\n    }, {\n      value: \"South Sudan\",\n      label: \"SSD\"\n    }, {\n      value: \"Sao Tome and Principe\",\n      label: \"STP\"\n    }, {\n      value: \"Kingdom of Eswatini\",\n      label: \"SWZ\"\n    }, {\n      value: \"Chad\",\n      label: \"TCD\"\n    }, {\n      value: \"Togo\",\n      label: \"TGO\"\n    }, {\n      value: \"Tunisia\",\n      label: \"TUN\"\n    }, {\n      value: \"Tanzania\",\n      label: \"TZA\"\n    }, {\n      value: \"Uganda\",\n      label: \"UGA\"\n    }, {\n      value: \"South Africa\",\n      label: \"ZAF\"\n    }, {\n      value: \"Zambia\",\n      label: \"ZMB\"\n    }, {\n      value: \"Zimbabwe\",\n      label: \"ZWE\"\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      value: selectedOption,\n      onChange: this.handleChange,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Application, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 17\n  }\n}), document.getElementById('app'));","map":{"version":3,"sources":["C:/mapboxAndReact/src/index.js"],"names":["React","ReactDOM","mapboxgl","axios","Select","accessToken","Application","Component","constructor","props","state","selectedOption","handleChange","setState","console","log","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","on","getCenter","toFixed","getZoom","agglomeration_fill_color","agglomeration_stroke_color","addSource","type","url","addLayer","id","source","filter","paint","remove","obj","removeLayer","add_country","country","render","options","value","label","el","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\n\r\n//// Access token for Africapolis mapbox account\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\r\n\r\n\r\n//// Basic setting of the map\r\nclass Application extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: 5,\r\n      lat: 0,\r\n      zoom: 3\r\n    };\r\n\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n\r\n//// Initial map setting\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p', /// Select mapstyle from mapbox studio\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom\r\n    });\r\n\r\n    map.on('move', () => {\r\n    this.setState({\r\n    lng: map.getCenter().lng.toFixed(4),\r\n    lat: map.getCenter().lat.toFixed(4),\r\n    zoom: map.getZoom().toFixed(2)\r\n    });\r\n    });\r\n//// Color setting\r\n\r\n  var agglomeration_fill_color =[\r\n                           \"step\",\r\n                           [\"get\", \"Population_2015\"],\r\n                           \"hsla(0, 0%, 8%, 0.5)\",\r\n                           10000,\r\n                           \"hsla(55, 30%, 93%, 0.5)\",\r\n                           30000,\r\n                           \"hsla(60, 100%, 90%, 0.5)\",\r\n                           100000,\r\n                           \"hsla(98, 55%, 81%, 0.5)\",\r\n                           300000,\r\n                           \"hsla(166, 44%, 65%, 0.5)\",\r\n                           1000000,\r\n                           \"hsla(186, 53%, 51%, 0.5)\",\r\n                           2000000,\r\n                           \"hsla(197, 74%, 43%, 0.5)\",\r\n                           11847635,\r\n                           \"hsla(197, 74%, 43%, 0.5)\"\r\n                          ]\r\n\r\n\r\n  var agglomeration_stroke_color =[\r\n                           \"step\",\r\n                           [\"get\", \"Population_2015\"],\r\n                           \"hsla(0, 0%, 8%, 1)\",\r\n                           10000,\r\n                           \"hsla(55, 30%, 93%, 1)\",\r\n                           30000,\r\n                           \"hsla(60, 100%, 90%, 1)\",\r\n                           100000,\r\n                           \"hsla(98, 55%, 81%, 1)\",\r\n                           300000,\r\n                           \"hsla(166, 44%, 65%, 1)\",\r\n                           1000000,\r\n                           \"hsla(186, 53%, 51%, 1)\",\r\n                           2000000,\r\n                           \"hsla(197, 74%, 43%, 1)\",\r\n                           11847635,\r\n                           \"hsla(197, 74%, 43%, 1)\"\r\n                          ]\r\n\r\n\r\n\r\n//// Import Africapolis agglomerations from mapbox\r\n    map.on('load', function() {\r\n      map.addSource(\r\n        'africapolis_agglos',\r\n      {\r\n        type: 'vector',\r\n        url: 'mapbox://mkmd.10cgedso'\r\n      }\r\n    );\r\n\r\n      map.addLayer({\r\n        id: 'agglomerations',\r\n        source:'africapolis_agglos',\r\n        type: 'circle',\r\n        'source-layer':'africapolis2020-1jc3vn',\r\n        filter:[\">\",\"Population_2015\",0],\r\n        paint: {\r\n       'circle-stroke-color': agglomeration_stroke_color,\r\n       'circle-stroke-width': 3,\r\n       'circle-color': agglomeration_fill_color\r\n        }\r\n      });\r\n    });\r\n////\r\n\r\nfunction remove(obj) {map.removeLayer(obj)}\r\n\r\nfunction add_country(obj,country) { map.addLayer({\r\n  id: 'agglomerations',\r\n  source:'africapolis_agglos',\r\n  type: 'circle',\r\n  'source-layer':'africapolis2020-1jc3vn',\r\n  filter:[\"==\",\"ISO3\",country],\r\n  paint: {\r\n 'circle-stroke-color': agglomeration_stroke_color,\r\n 'circle-stroke-width': 3,\r\n 'circle-color': agglomeration_fill_color\r\n  }\r\n});\r\n}\r\n//remove('agglomerations')\r\n//add_country('agglomerations','NER')\r\n}\r\n\r\n\r\n\r\nstate = {\r\n  selectedOption: null,\r\n};\r\nhandleChange = selectedOption => {\r\n  this.setState(\r\n    { selectedOption },\r\n    () => {\r\n      // remove('agglomerations')\r\n      // add_country('agglomerations',this.state.selectedOption)\r\n      console.log(`Option selected:`, this.state.selectedOption)\r\n\r\n\r\n    }\r\n  );\r\n  }\r\n\r\n  render() {\r\n    const { selectedOption } = this.state;\r\n    const options = [{ value:\"Angola\",label:\"AGO\" },\r\n{ value:\"Burundi\",label:\"BDI\" },\r\n{ value:\"Benin\",label:\"BEN\" },\r\n{ value:\"Burkina Faso\",label:\"BFA\" },\r\n{ value:\"Botswana\",label:\"BWA\" },\r\n{ value:\"Central African Republic\",label:\"CAF\" },\r\n{ value:\"Cote d`Ivoire\",label:\"CIV\" },\r\n{ value:\"Cameroon\",label:\"CMR\" },\r\n{ value:\"Democratic Republic of the Congo\",label:\"COD\" },\r\n{ value:\"Republic of the Congo\",label:\"COG\" },\r\n{ value:\"Cabo Verde\",label:\"CPV\" },\r\n{ value:\"Djibouti\",label:\"DJI\" },\r\n{ value:\"Algeria\",label:\"DZA\" },\r\n{ value:\"Egypt\",label:\"EGY\" },\r\n{ value:\"Eritrea\",label:\"ERI\" },\r\n{ value:\"Ethiopia\",label:\"ETH\" },\r\n{ value:\"Gabon\",label:\"GAB\" },\r\n{ value:\"Ghana\",label:\"GHA\" },\r\n{ value:\"Guinea\",label:\"GIN\" },\r\n{ value:\"The Gambia\",label:\"GMB\" },\r\n{ value:\"Guinea-Bissau\",label:\"GNB\" },\r\n{ value:\"Equatorial Guinea\",label:\"GNQ\" },\r\n{ value:\"Kenya\",label:\"KEN\" },\r\n{ value:\"Liberia\",label:\"LBR\" },\r\n{ value:\"Libya\",label:\"LBY\" },\r\n{ value:\"Lesotho\",label:\"LSO\" },\r\n{ value:\"Morocco\",label:\"MAR\" },\r\n{ value:\"Mali\",label:\"MLI\" },\r\n{ value:\"Mozambique\",label:\"MOZ\" },\r\n{ value:\"Mauritania\",label:\"MRT\" },\r\n{ value:\"Malawi\",label:\"MWI\" },\r\n{ value:\"Namibia\",label:\"NAM\" },\r\n{ value:\"Niger\",label:\"NER\" },\r\n{ value:\"Nigeria\",label:\"NGA\" },\r\n{ value:\"Rwanda\",label:\"RWA\" },\r\n{ value:\"Sudan\",label:\"SDN\" },\r\n{ value:\"Senegal\",label:\"SEN\" },\r\n{ value:\"Sierra Leone\",label:\"SLE\" },\r\n{ value:\"Somalia\",label:\"SOM\" },\r\n{ value:\"South Sudan\",label:\"SSD\" },\r\n{ value:\"Sao Tome and Principe\",label:\"STP\" },\r\n{ value:\"Kingdom of Eswatini\",label:\"SWZ\" },\r\n{ value:\"Chad\",label:\"TCD\" },\r\n{ value:\"Togo\",label:\"TGO\" },\r\n{ value:\"Tunisia\",label:\"TUN\" },\r\n{ value:\"Tanzania\",label:\"TZA\" },\r\n{ value:\"Uganda\",label:\"UGA\" },\r\n{ value:\"South Africa\",label:\"ZAF\" },\r\n{ value:\"Zambia\",label:\"ZMB\" },\r\n{ value:\"Zimbabwe\",label:\"ZWE\" }];\r\n    return (\r\n      <div>\r\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\" >\r\n        <Select\r\n                value={selectedOption}\r\n                onChange={this.handleChange}\r\n                options={options}\r\n              />\r\n                </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nReactDOM.render(<Application />, document.getElementById('app'));\r\n"]},"metadata":{},"sourceType":"module"}