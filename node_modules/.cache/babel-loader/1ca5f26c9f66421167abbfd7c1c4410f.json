{"ast":null,"code":"var _jsxFileName = \"C:\\\\mapboxAndReact\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport axios from 'axios';\nimport Select from 'react-select'; //// Access token for Africapolis mapbox account\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\nconst agglomeration_fill_color = [\"step\", [\"get\", \"Population_2015\"], \"hsla(0, 0%, 8%, 0.5)\", 10000, \"hsla(55, 30%, 93%, 0.5)\", 30000, \"hsla(60, 100%, 90%, 0.5)\", 100000, \"hsla(98, 55%, 81%, 0.5)\", 300000, \"hsla(166, 44%, 65%, 0.5)\", 1000000, \"hsla(186, 53%, 51%, 0.5)\", 2000000, \"hsla(197, 74%, 43%, 0.5)\", 11847635, \"hsla(197, 74%, 43%, 0.5)\"];\nconst agglomeration_stroke_color = [\"step\", [\"get\", \"Population_2015\"], \"hsla(0, 0%, 8%, 1)\", 10000, \"hsla(55, 30%, 93%, 1)\", 30000, \"hsla(60, 100%, 90%, 1)\", 100000, \"hsla(98, 55%, 81%, 1)\", 300000, \"hsla(166, 44%, 65%, 1)\", 1000000, \"hsla(186, 53%, 51%, 1)\", 2000000, \"hsla(197, 74%, 43%, 1)\", 11847635, \"hsla(197, 74%, 43%, 1)\"];\nconst options = [{\n  label: \"Angola\",\n  value: \"AGO\"\n}, {\n  label: \"Burundi\",\n  value: \"BDI\"\n}, {\n  label: \"Benin\",\n  value: \"BEN\"\n}, {\n  label: \"Burkina Faso\",\n  value: \"BFA\"\n}, {\n  label: \"Botswana\",\n  value: \"BWA\"\n}, {\n  label: \"Central African Republic\",\n  value: \"CAF\"\n}, {\n  label: \"Cote d`Ivoire\",\n  value: \"CIV\"\n}, {\n  label: \"Cameroon\",\n  value: \"CMR\"\n}, {\n  label: \"Democratic Republic of the Congo\",\n  value: \"COD\"\n}, {\n  label: \"Republic of the Congo\",\n  value: \"COG\"\n}, {\n  label: \"Cabo Verde\",\n  value: \"CPV\"\n}, {\n  label: \"Djibouti\",\n  value: \"DJI\"\n}, {\n  label: \"Algeria\",\n  value: \"DZA\"\n}, {\n  label: \"Egypt\",\n  value: \"EGY\"\n}, {\n  label: \"Eritrea\",\n  value: \"ERI\"\n}, {\n  label: \"Ethiopia\",\n  value: \"ETH\"\n}, {\n  label: \"Gabon\",\n  value: \"GAB\"\n}, {\n  label: \"Ghana\",\n  value: \"GHA\"\n}, {\n  label: \"Guinea\",\n  value: \"GIN\"\n}, {\n  label: \"The Gambia\",\n  value: \"GMB\"\n}, {\n  label: \"Guinea-Bissau\",\n  value: \"GNB\"\n}, {\n  label: \"Equatorial Guinea\",\n  value: \"GNQ\"\n}, {\n  label: \"Kenya\",\n  value: \"KEN\"\n}, {\n  label: \"Liberia\",\n  value: \"LBR\"\n}, {\n  label: \"Libya\",\n  value: \"LBY\"\n}, {\n  label: \"Lesotho\",\n  value: \"LSO\"\n}, {\n  label: \"Morocco\",\n  value: \"MAR\"\n}, {\n  label: \"Mali\",\n  value: \"MLI\"\n}, {\n  label: \"Mozambique\",\n  value: \"MOZ\"\n}, {\n  label: \"Mauritania\",\n  value: \"MRT\"\n}, {\n  label: \"Malawi\",\n  value: \"MWI\"\n}, {\n  label: \"Namibia\",\n  value: \"NAM\"\n}, {\n  label: \"Niger\",\n  value: \"NER\"\n}, {\n  label: \"Nigeria\",\n  value: \"NGA\"\n}, {\n  label: \"Rwanda\",\n  value: \"RWA\"\n}, {\n  label: \"Sudan\",\n  value: \"SDN\"\n}, {\n  label: \"Senegal\",\n  value: \"SEN\"\n}, {\n  label: \"Sierra Leone\",\n  value: \"SLE\"\n}, {\n  label: \"Somalia\",\n  value: \"SOM\"\n}, {\n  label: \"South Sudan\",\n  value: \"SSD\"\n}, {\n  label: \"Sao Tome and Principe\",\n  value: \"STP\"\n}, {\n  label: \"Kingdom of Eswatini\",\n  value: \"SWZ\"\n}, {\n  label: \"Chad\",\n  value: \"TCD\"\n}, {\n  label: \"Togo\",\n  value: \"TGO\"\n}, {\n  label: \"Tunisia\",\n  value: \"TUN\"\n}, {\n  label: \"Tanzania\",\n  value: \"TZA\"\n}, {\n  label: \"Uganda\",\n  value: \"UGA\"\n}, {\n  label: \"South Africa\",\n  value: \"ZAF\"\n}, {\n  label: \"Zambia\",\n  value: \"ZMB\"\n}, {\n  label: \"Zimbabwe\",\n  value: \"ZWE\"\n}]; //// Basic setting of the map\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.remove = obj => {\n      this.map.removeLayer(obj);\n    };\n\n    this.add_country = (obj, country) => {\n      this.map.addLayer({\n        id: obj,\n        source: 'africapolis_agglos',\n        type: 'circle',\n        'source-layer': 'africapolis2020-3mv6ux',\n        filter: [\"all\", [\"==\", \"ISO3\", country], [\">\", \"Population_2015\", 0]],\n        paint: {\n          'circle-stroke-color': agglomeration_stroke_color,\n          'circle-stroke-width': 3,\n          'circle-color': agglomeration_fill_color\n        }\n      });\n    };\n\n    this.state = {\n      lng: 5,\n      lat: 0,\n      zoom: 3,\n      selectedOption: {\n        label: '',\n        value: ''\n      }\n    };\n  }\n\n  componentDidMount() {\n    //// Initial map setting\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\n      /// Select mapstyle from mapbox studio\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    this.map.on('move', () => {\n      this.setState({\n        lng: this.map.getCenter().lng.toFixed(4),\n        lat: this.map.getCenter().lat.toFixed(4),\n        zoom: this.map.getZoom().toFixed(2)\n      });\n    }); //// Import Africapolis agglomerations from mapbox\n\n    this.map.on('load', () => {\n      this.map.addSource('africapolis_agglos', {\n        type: 'vector',\n        url: 'mapbox://mkmd.3e0rk98j'\n      });\n      this.map.addLayer({\n        id: 'agglomerations',\n        source: 'africapolis_agglos',\n        type: 'circle',\n        'source-layer': 'africapolis2020-3mv6ux',\n        filter: [\">\", \"Population_2015\", 0],\n        paint: {\n          'circle-stroke-color': agglomeration_stroke_color,\n          'circle-stroke-width': 3,\n          'circle-color': agglomeration_fill_color\n        }\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.selectedOption !== this.state.selectedOption) {\n      this.remove('agglomerations');\n      this.add_country('agglomerations', this.state.selectedOption.value);\n    }\n  }\n\n  render() {\n    const {\n      selectedOption\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, \"Longitude: \", this.state.lng, \" | Latitude: \", this.state.lat, \" | Zoom: \", this.state.zoom), /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      value: selectedOption,\n      onChange: value => this.setState({\n        selectedOption: value\n      }),\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Application, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 17\n  }\n}), document.getElementById('app'));","map":{"version":3,"sources":["C:/mapboxAndReact/src/index.js"],"names":["React","ReactDOM","mapboxgl","axios","Select","accessToken","agglomeration_fill_color","agglomeration_stroke_color","options","label","value","Application","Component","constructor","props","remove","obj","map","removeLayer","add_country","country","addLayer","id","source","type","filter","paint","state","lng","lat","zoom","selectedOption","componentDidMount","Map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","addSource","url","componentDidUpdate","prevProps","prevState","render","el","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\n//// Access token for Africapolis mapbox account\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\r\nconst agglomeration_fill_color =[\r\n  \"step\",\r\n  [\"get\", \"Population_2015\"],\r\n  \"hsla(0, 0%, 8%, 0.5)\",\r\n  10000,\r\n  \"hsla(55, 30%, 93%, 0.5)\",\r\n  30000,\r\n  \"hsla(60, 100%, 90%, 0.5)\",\r\n  100000,\r\n  \"hsla(98, 55%, 81%, 0.5)\",\r\n  300000,\r\n  \"hsla(166, 44%, 65%, 0.5)\",\r\n  1000000,\r\n  \"hsla(186, 53%, 51%, 0.5)\",\r\n  2000000,\r\n  \"hsla(197, 74%, 43%, 0.5)\",\r\n  11847635,\r\n  \"hsla(197, 74%, 43%, 0.5)\"\r\n ]\r\n const agglomeration_stroke_color =[\r\n  \"step\",\r\n  [\"get\", \"Population_2015\"],\r\n  \"hsla(0, 0%, 8%, 1)\",\r\n  10000,\r\n  \"hsla(55, 30%, 93%, 1)\",\r\n  30000,\r\n  \"hsla(60, 100%, 90%, 1)\",\r\n  100000,\r\n  \"hsla(98, 55%, 81%, 1)\",\r\n  300000,\r\n  \"hsla(166, 44%, 65%, 1)\",\r\n  1000000,\r\n  \"hsla(186, 53%, 51%, 1)\",\r\n  2000000,\r\n  \"hsla(197, 74%, 43%, 1)\",\r\n  11847635,\r\n  \"hsla(197, 74%, 43%, 1)\"\r\n ]\r\n const options = [{ label:\"Angola\",value:\"AGO\" },\r\n        { label:\"Burundi\",value:\"BDI\" },\r\n        { label:\"Benin\",value:\"BEN\" },\r\n        { label:\"Burkina Faso\",value:\"BFA\" },\r\n        { label:\"Botswana\",value:\"BWA\" },\r\n        { label:\"Central African Republic\",value:\"CAF\" },\r\n        { label:\"Cote d`Ivoire\",value:\"CIV\" },\r\n        { label:\"Cameroon\",value:\"CMR\" },\r\n        { label:\"Democratic Republic of the Congo\",value:\"COD\" },\r\n        { label:\"Republic of the Congo\",value:\"COG\" },\r\n        { label:\"Cabo Verde\",value:\"CPV\" },\r\n        { label:\"Djibouti\",value:\"DJI\" },\r\n        { label:\"Algeria\",value:\"DZA\" },\r\n        { label:\"Egypt\",value:\"EGY\" },\r\n        { label:\"Eritrea\",value:\"ERI\" },\r\n        { label:\"Ethiopia\",value:\"ETH\" },\r\n        { label:\"Gabon\",value:\"GAB\" },\r\n        { label:\"Ghana\",value:\"GHA\" },\r\n        { label:\"Guinea\",value:\"GIN\" },\r\n        { label:\"The Gambia\",value:\"GMB\" },\r\n        { label:\"Guinea-Bissau\",value:\"GNB\" },\r\n        { label:\"Equatorial Guinea\",value:\"GNQ\" },\r\n        { label:\"Kenya\",value:\"KEN\" },\r\n        { label:\"Liberia\",value:\"LBR\" },\r\n        { label:\"Libya\",value:\"LBY\" },\r\n        { label:\"Lesotho\",value:\"LSO\" },\r\n        { label:\"Morocco\",value:\"MAR\" },\r\n        { label:\"Mali\",value:\"MLI\" },\r\n        { label:\"Mozambique\",value:\"MOZ\" },\r\n        { label:\"Mauritania\",value:\"MRT\" },\r\n        { label:\"Malawi\",value:\"MWI\" },\r\n        { label:\"Namibia\",value:\"NAM\" },\r\n        { label:\"Niger\",value:\"NER\" },\r\n        { label:\"Nigeria\",value:\"NGA\" },\r\n        { label:\"Rwanda\",value:\"RWA\" },\r\n        { label:\"Sudan\",value:\"SDN\" },\r\n        { label:\"Senegal\",value:\"SEN\" },\r\n        { label:\"Sierra Leone\",value:\"SLE\" },\r\n        { label:\"Somalia\",value:\"SOM\" },\r\n        { label:\"South Sudan\",value:\"SSD\" },\r\n        { label:\"Sao Tome and Principe\",value:\"STP\" },\r\n        { label:\"Kingdom of Eswatini\",value:\"SWZ\" },\r\n        { label:\"Chad\",value:\"TCD\" },\r\n        { label:\"Togo\",value:\"TGO\" },\r\n        { label:\"Tunisia\",value:\"TUN\" },\r\n        { label:\"Tanzania\",value:\"TZA\" },\r\n        { label:\"Uganda\",value:\"UGA\" },\r\n        { label:\"South Africa\",value:\"ZAF\" },\r\n        { label:\"Zambia\",value:\"ZMB\" },\r\n        { label:\"Zimbabwe\",value:\"ZWE\" }];\r\n//// Basic setting of the map\r\nclass Application extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: 5,\r\n      lat: 0,\r\n      zoom: 3,\r\n      selectedOption: {label: '', value: ''}\r\n    };\r\n  }\r\ncomponentDidMount() {\r\n//// Initial map setting\r\n\r\n     this.map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p', /// Select mapstyle from mapbox studio\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom\r\n    });\r\n    this.map.on('move', () => {\r\n      this.setState({\r\n      lng: this.map.getCenter().lng.toFixed(4),\r\n      lat: this.map.getCenter().lat.toFixed(4),\r\n      zoom: this.map.getZoom().toFixed(2)\r\n      });\r\n    });\r\n//// Import Africapolis agglomerations from mapbox\r\n    this.map.on('load', () => {\r\n      this.map.addSource('africapolis_agglos', { type: 'vector', url: 'mapbox://mkmd.3e0rk98j'});\r\n      this.map.addLayer({\r\n            id: 'agglomerations',\r\n            source:'africapolis_agglos',\r\n            type: 'circle',\r\n            'source-layer':'africapolis2020-3mv6ux',\r\n            filter:[\">\",\"Population_2015\",0],\r\n            paint: {\r\n                'circle-stroke-color': agglomeration_stroke_color,\r\n                'circle-stroke-width': 3,\r\n                'circle-color': agglomeration_fill_color\r\n            }\r\n        });\r\n    });\r\n\r\n\r\n}\r\ncomponentDidUpdate(prevProps, prevState) {\r\n    if( prevState.selectedOption !== this.state.selectedOption ) {\r\n            this.remove('agglomerations');\r\n            this.add_country('agglomerations',this.state.selectedOption.value);\r\n    }\r\n}\r\nremove = obj => {\r\n    this.map.removeLayer(obj)\r\n}\r\nadd_country = (obj,country) => {\r\n    this.map.addLayer({\r\n        id: obj,\r\n        source:'africapolis_agglos',\r\n        type: 'circle',\r\n        'source-layer':'africapolis2020-3mv6ux',\r\n        filter:[\"all\",[\"==\",\"ISO3\",country],[\">\",\"Population_2015\",0]],\r\n        paint: {\r\n        'circle-stroke-color': agglomeration_stroke_color,\r\n        'circle-stroke-width': 3,\r\n        'circle-color': agglomeration_fill_color\r\n        }\r\n    });\r\n}\r\nrender() {\r\n    const { selectedOption } = this.state;\r\n    return (\r\n      <div>\r\n        <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\r\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\" >\r\n        <Select\r\n                value={selectedOption}\r\n                onChange={(value) => this.setState({ selectedOption: value}) }\r\n                options={options}\r\n              />\r\n                </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nReactDOM.render(<Application />, document.getElementById('app'));\r\n"]},"metadata":{},"sourceType":"module"}