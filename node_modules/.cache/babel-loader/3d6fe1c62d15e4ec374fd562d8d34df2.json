{"ast":null,"code":"var _jsxFileName = \"C:\\\\mapboxAndReact\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport axios from 'axios';\nimport papa from 'papaparse';\nimport csv2geojson from 'csv2geojson';\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 5,\n      lat: 0,\n      zoom: 3\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    map.on('load', function () {\n      // Add a source for the state polygons.\n      map.addSource('states', {\n        'type': 'geojson',\n        'data': 'https://gist.githubusercontent.com/mkmdivy/044d7f9f13cc2ec22ba6b1751c3527a6/raw/9908322b5ac7915720fc98190f755f139bde8ff3/africa'\n      }); // Add a layer showing the state polygons.\n\n      map.addLayer({\n        'id': 'NAME_EN',\n        'type': 'fill',\n        'source': 'states',\n        'paint': {\n          'fill-color': 'rgba(200, 100, 240, 0.4)',\n          'fill-outline-color': 'rgba(200, 100, 240, 1)'\n        }\n      }); // When a click event occurs on a feature in the states layer, open a popup at the\n      // location of the click, with description HTML from its properties.\n\n      map.on('click', 'NAME_EN', function (e) {\n        new mapboxgl.Popup().setLngLat(e.lngLat).setHTML(e.features[0].properties.NAME_EN).addTo(map);\n        makeGetRequest(e.features[0].properties.NAME_EN, 1);\n      }); // Change the cursor to a pointer when the mouse is over the states layer.\n\n      map.on('mouseenter', 'NAME_EN', function () {\n        map.getCanvas().style.cursor = 'pointer';\n      }); // Change it back to a pointer when it leaves.\n\n      map.on('mouseleave', 'NAME_EN', function () {\n        map.getCanvas().style.cursor = '';\n      });\n    }); // /////// ******Add Africapolis\n    // map.on('load', function() {\n    //   // Add a circle layer with a vector source.\n    //   map.addLayer({\n    //     id: 'points-of-interest',\n    //     source: {\n    //       type: 'vector',\n    //       url: 'mapbox://mkmd.ck5qy6ole1xja2npflwvfk78l-2j015'\n    //     },\n    //     'source-layer': 'metropole',\n    //     type: 'circle',\n    //     paint: {\n    //       // Mapbox Style Specification paint properties\n    //     },\n    //     layout: {\n    //       // Mapbox Style Specification layout properties\n    //     }\n    //   });\n    //\n    // });\n    //axios.get('chad.json').then(response=>{console.log(response.data.Agglomerations[0].Longlat)})\n    //mkmd.ck5qy6ole1xja2npflwvfk78l-2j015\n\n    async function makeGetRequest(country, select) {\n      let covid = await axios.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'); //console.log(covid.data)\n\n      csv2geojson.csv2geojson(covid.data, function (err, data) {\n        let covid_array = data;\n        console.log(covid_array);\n        map.addSource('covid', {\n          type: 'geojson',\n          data: covid_array\n        });\n        map.addLayer({\n          'id': 'covid',\n          'type': 'circle',\n          'source': 'covid',\n          'filter': ['>', '4/7/20', 423],\n          'paint': {\n            'circle-radius': ['step', ['get', '4/7/20'], 20, 100, 30, 750, 40] //'fill-color': 'rgba(200, 100, 240, 0.4)',\n            //'fill-outline-color': 'rgba(200, 100, 240, 1)'\n\n          }\n        }); //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\n      }); //let covid_array= papa.parse(covid.data,{header:true,skipEmptyLines:true}).data;\n      //var x;\n      //for (x in [3,5,25,32,33,35,47,48,84,85,87,96,99,101,104,105,118,119,122,125,143,149,153,157,164,165,173,174,189,194,200,201,204,209,211,213,215,230,231,235,241,243,244,254,255,256,258,261,262,263]){new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map)\n      //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\n      //}\n      //let res = await axios.get(country+'.json');\n      //console.log(res.data.Agglomerations);\n      //let data = res.data.Agglomerations[select].Longlat;\n      //new mapboxgl.Marker().setLngLat(data).addTo(map);\n      //marker.setLngLat(data)\n      //marker.addTo(map);\n    } //let agglos = axios.get('egypt.json');\n    //console.log(agglos)\n    //let data = agglos.data.Agglomerations[0].Longlat;\n    //var marker = new mapboxgl.Marker();\n\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Application, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 17\n  }\n}), document.getElementById('app'));","map":{"version":3,"sources":["C:/mapboxAndReact/src/index.js"],"names":["React","ReactDOM","mapboxgl","axios","papa","csv2geojson","accessToken","Application","Component","constructor","props","state","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","addSource","addLayer","e","Popup","setLngLat","lngLat","setHTML","features","properties","NAME_EN","addTo","makeGetRequest","getCanvas","cursor","country","select","covid","get","data","err","covid_array","console","log","type","render","el","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport papa from 'papaparse';\r\nimport csv2geojson from 'csv2geojson'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\r\nclass Application extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: 5,\r\n      lat: 0,\r\n      zoom: 3\r\n    };\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom\r\n    });\r\n    map.on('move', () => {\r\n    this.setState({\r\n    lng: map.getCenter().lng.toFixed(4),\r\n    lat: map.getCenter().lat.toFixed(4),\r\n    zoom: map.getZoom().toFixed(2)\r\n    });\r\n    });\r\n\r\n    map.on('load', function() {\r\n    // Add a source for the state polygons.\r\n    map.addSource('states', {\r\n    'type': 'geojson',\r\n    'data':\r\n    'https://gist.githubusercontent.com/mkmdivy/044d7f9f13cc2ec22ba6b1751c3527a6/raw/9908322b5ac7915720fc98190f755f139bde8ff3/africa'\r\n    });\r\n\r\n    // Add a layer showing the state polygons.\r\n    map.addLayer({\r\n    'id': 'NAME_EN',\r\n    'type': 'fill',\r\n    'source': 'states',\r\n    'paint': {\r\n    'fill-color': 'rgba(200, 100, 240, 0.4)',\r\n    'fill-outline-color': 'rgba(200, 100, 240, 1)'\r\n    }\r\n    });\r\n\r\n    // When a click event occurs on a feature in the states layer, open a popup at the\r\n    // location of the click, with description HTML from its properties.\r\n    map.on('click', 'NAME_EN', function(e) {\r\n    new mapboxgl.Popup()\r\n    .setLngLat(e.lngLat)\r\n    .setHTML(e.features[0].properties.NAME_EN)\r\n    .addTo(map);\r\n    makeGetRequest(e.features[0].properties.NAME_EN,1)\r\n    });\r\n\r\n    // Change the cursor to a pointer when the mouse is over the states layer.\r\n    map.on('mouseenter', 'NAME_EN', function() {\r\n    map.getCanvas().style.cursor = 'pointer';\r\n    });\r\n\r\n    // Change it back to a pointer when it leaves.\r\n    map.on('mouseleave', 'NAME_EN', function() {\r\n    map.getCanvas().style.cursor = '';\r\n    });\r\n    });\r\n\r\n\r\n\r\n    // /////// ******Add Africapolis\r\n    // map.on('load', function() {\r\n    //   // Add a circle layer with a vector source.\r\n    //   map.addLayer({\r\n    //     id: 'points-of-interest',\r\n    //     source: {\r\n    //       type: 'vector',\r\n    //       url: 'mapbox://mkmd.ck5qy6ole1xja2npflwvfk78l-2j015'\r\n    //     },\r\n    //     'source-layer': 'metropole',\r\n    //     type: 'circle',\r\n    //     paint: {\r\n    //       // Mapbox Style Specification paint properties\r\n    //     },\r\n    //     layout: {\r\n    //       // Mapbox Style Specification layout properties\r\n    //     }\r\n    //   });\r\n    //\r\n    // });\r\n\r\n    //axios.get('chad.json').then(response=>{console.log(response.data.Agglomerations[0].Longlat)})\r\n    //mkmd.ck5qy6ole1xja2npflwvfk78l-2j015\r\n    async function makeGetRequest(country,select) {\r\n      let covid = await axios.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')\r\n      //console.log(covid.data)\r\n      csv2geojson.csv2geojson(covid.data,function(err,data){let covid_array=data\r\n      console.log(covid_array)\r\n      map.addSource('covid', {\r\n        type: 'geojson',\r\n        data: covid_array\r\n      });\r\n      map.addLayer({\r\n      'id': 'covid',\r\n      'type': 'circle',\r\n      'source': 'covid',\r\n      'filter': ['>', '4/7/20',423],\r\n      'paint': {\r\n        'circle-radius': [\r\n      'step',\r\n      ['get', '4/7/20'],\r\n      20,\r\n      100,\r\n      30,\r\n      750,\r\n      40\r\n      ]\r\n      //'fill-color': 'rgba(200, 100, 240, 0.4)',\r\n      //'fill-outline-color': 'rgba(200, 100, 240, 1)'\r\n      }\r\n      });\r\n        //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\r\n      });\r\n\r\n\r\n      //let covid_array= papa.parse(covid.data,{header:true,skipEmptyLines:true}).data;\r\n      //var x;\r\n      //for (x in [3,5,25,32,33,35,47,48,84,85,87,96,99,101,104,105,118,119,122,125,143,149,153,157,164,165,173,174,189,194,200,201,204,209,211,213,215,230,231,235,241,243,244,254,255,256,258,261,262,263]){new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map)\r\n        //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\r\n      //}\r\n\r\n\r\n      //let res = await axios.get(country+'.json');\r\n      //console.log(res.data.Agglomerations);\r\n      //let data = res.data.Agglomerations[select].Longlat;\r\n\r\n      //new mapboxgl.Marker().setLngLat(data).addTo(map);\r\n      //marker.setLngLat(data)\r\n      //marker.addTo(map);\r\n    }\r\n\r\n\r\n    //let agglos = axios.get('egypt.json');\r\n    //console.log(agglos)\r\n    //let data = agglos.data.Agglomerations[0].Longlat;\r\n\r\n    //var marker = new mapboxgl.Marker();\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nReactDOM.render(<Application />, document.getElementById('app'));\r\n"]},"metadata":{},"sourceType":"module"}