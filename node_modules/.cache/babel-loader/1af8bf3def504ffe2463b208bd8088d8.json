{"ast":null,"code":"var _jsxFileName = \"C:\\\\mapboxAndReact\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport axios from 'axios';\nimport Select from 'react-select'; //// Access token for Africapolis mapbox account\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA'; //// Basic setting of the map\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: null\n    };\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      }, () => {\n        // remove('agglomerations')\n        // add_country('agglomerations',this.state.selectedOption)\n        console.log(`Option selected:`, this.state.selectedOption);\n      });\n    };\n\n    this.state = {\n      lng: 5,\n      lat: 0,\n      zoom: 3\n    };\n  }\n\n  componentDidMount() {\n    //// Initial map setting\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\n      /// Select mapstyle from mapbox studio\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    }); //// Color setting\n\n    var agglomeration_fill_color = [\"step\", [\"get\", \"Population_2015\"], \"hsla(0, 0%, 8%, 0.5)\", 10000, \"hsla(55, 30%, 93%, 0.5)\", 30000, \"hsla(60, 100%, 90%, 0.5)\", 100000, \"hsla(98, 55%, 81%, 0.5)\", 300000, \"hsla(166, 44%, 65%, 0.5)\", 1000000, \"hsla(186, 53%, 51%, 0.5)\", 2000000, \"hsla(197, 74%, 43%, 0.5)\", 11847635, \"hsla(197, 74%, 43%, 0.5)\"];\n    var agglomeration_stroke_color = [\"step\", [\"get\", \"Population_2015\"], \"hsla(0, 0%, 8%, 1)\", 10000, \"hsla(55, 30%, 93%, 1)\", 30000, \"hsla(60, 100%, 90%, 1)\", 100000, \"hsla(98, 55%, 81%, 1)\", 300000, \"hsla(166, 44%, 65%, 1)\", 1000000, \"hsla(186, 53%, 51%, 1)\", 2000000, \"hsla(197, 74%, 43%, 1)\", 11847635, \"hsla(197, 74%, 43%, 1)\"]; //// Import Africapolis agglomerations from mapbox\n\n    map.on('load', function () {\n      map.addSource('africapolis_agglos', {\n        type: 'vector',\n        url: 'mapbox://mkmd.10cgedso'\n      });\n      map.addLayer({\n        id: 'agglomerations',\n        source: 'africapolis_agglos',\n        type: 'circle',\n        'source-layer': 'africapolis2020-1jc3vn',\n        filter: [\">\", \"Population_2015\", 0],\n        paint: {\n          'circle-stroke-color': agglomeration_stroke_color,\n          'circle-stroke-width': 3,\n          'circle-color': agglomeration_fill_color\n        }\n      });\n    }); ////\n\n    function remove(obj) {\n      map.removeLayer(obj);\n    }\n\n    function add_country(obj, country) {\n      map.addLayer({\n        id: 'agglomerations',\n        source: 'africapolis_agglos',\n        type: 'circle',\n        'source-layer': 'africapolis2020-1jc3vn',\n        filter: [\"==\", \"ISO3\", country],\n        paint: {\n          'circle-stroke-color': agglomeration_stroke_color,\n          'circle-stroke-width': 3,\n          'circle-color': agglomeration_fill_color\n        }\n      });\n    } //remove('agglomerations')\n    //add_country('agglomerations','NER')\n\n  }\n\n  render() {\n    const {\n      selectedOption\n    } = this.state;\n    const options = [{\n      \"Angola\": \"AGO\",\n      \"Burundi\": \"BDI\",\n      \"Benin\": \"BEN\",\n      \"Burkina Faso\": \"BFA\",\n      \"Botswana\": \"BWA\",\n      \"Central African Republic\": \"CAF\",\n      \"Cote d`Ivoire\": \"CIV\",\n      \"Cameroon\": \"CMR\",\n      \"Democratic Republic of the Congo\": \"COD\",\n      \"Republic of the Congo\": \"COG\",\n      \"Cabo Verde\": \"CPV\",\n      \"Djibouti\": \"DJI\",\n      \"Algeria\": \"DZA\",\n      \"Egypt\": \"EGY\",\n      \"Eritrea\": \"ERI\",\n      \"Ethiopia\": \"ETH\",\n      \"Gabon\": \"GAB\",\n      \"Ghana\": \"GHA\",\n      \"Guinea\": \"GIN\",\n      \"The Gambia\": \"GMB\",\n      \"Guinea-Bissau\": \"GNB\",\n      \"Equatorial Guinea\": \"GNQ\",\n      \"Kenya\": \"KEN\",\n      \"Liberia\": \"LBR\",\n      \"Libya\": \"LBY\",\n      \"Lesotho\": \"LSO\",\n      \"Morocco\": \"MAR\",\n      \"Mali\": \"MLI\",\n      \"Mozambique\": \"MOZ\",\n      \"Mauritania\": \"MRT\",\n      \"Malawi\": \"MWI\",\n      \"Namibia\": \"NAM\",\n      \"Niger\": \"NER\",\n      \"Nigeria\": \"NGA\",\n      \"Rwanda\": \"RWA\",\n      \"Sudan\": \"SDN\",\n      \"Senegal\": \"SEN\",\n      \"Sierra Leone\": \"SLE\",\n      \"Somalia\": \"SOM\",\n      \"South Sudan\": \"SSD\",\n      \"Sao Tome and Principe\": \"STP\",\n      \"Kingdom of Eswatini\": \"SWZ\",\n      \"Chad\": \"TCD\",\n      \"Togo\": \"TGO\",\n      \"Tunisia\": \"TUN\",\n      \"Tanzania\": \"TZA\",\n      \"Uganda\": \"UGA\",\n      \"South Africa\": \"ZAF\",\n      \"Zambia\": \"ZMB\",\n      \"Zimbabwe\": \"ZWE\"\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      value: selectedOption,\n      onChange: this.handleChange,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Application, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 17\n  }\n}), document.getElementById('app'));","map":{"version":3,"sources":["C:/mapboxAndReact/src/index.js"],"names":["React","ReactDOM","mapboxgl","axios","Select","accessToken","Application","Component","constructor","props","state","selectedOption","handleChange","setState","console","log","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","on","getCenter","toFixed","getZoom","agglomeration_fill_color","agglomeration_stroke_color","addSource","type","url","addLayer","id","source","filter","paint","remove","obj","removeLayer","add_country","country","render","options","el","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\n\r\n//// Access token for Africapolis mapbox account\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\r\n\r\n\r\n//// Basic setting of the map\r\nclass Application extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: 5,\r\n      lat: 0,\r\n      zoom: 3\r\n    };\r\n\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n\r\n//// Initial map setting\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p', /// Select mapstyle from mapbox studio\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom\r\n    });\r\n\r\n    map.on('move', () => {\r\n    this.setState({\r\n    lng: map.getCenter().lng.toFixed(4),\r\n    lat: map.getCenter().lat.toFixed(4),\r\n    zoom: map.getZoom().toFixed(2)\r\n    });\r\n    });\r\n//// Color setting\r\n\r\n  var agglomeration_fill_color =[\r\n                           \"step\",\r\n                           [\"get\", \"Population_2015\"],\r\n                           \"hsla(0, 0%, 8%, 0.5)\",\r\n                           10000,\r\n                           \"hsla(55, 30%, 93%, 0.5)\",\r\n                           30000,\r\n                           \"hsla(60, 100%, 90%, 0.5)\",\r\n                           100000,\r\n                           \"hsla(98, 55%, 81%, 0.5)\",\r\n                           300000,\r\n                           \"hsla(166, 44%, 65%, 0.5)\",\r\n                           1000000,\r\n                           \"hsla(186, 53%, 51%, 0.5)\",\r\n                           2000000,\r\n                           \"hsla(197, 74%, 43%, 0.5)\",\r\n                           11847635,\r\n                           \"hsla(197, 74%, 43%, 0.5)\"\r\n                          ]\r\n\r\n\r\n  var agglomeration_stroke_color =[\r\n                           \"step\",\r\n                           [\"get\", \"Population_2015\"],\r\n                           \"hsla(0, 0%, 8%, 1)\",\r\n                           10000,\r\n                           \"hsla(55, 30%, 93%, 1)\",\r\n                           30000,\r\n                           \"hsla(60, 100%, 90%, 1)\",\r\n                           100000,\r\n                           \"hsla(98, 55%, 81%, 1)\",\r\n                           300000,\r\n                           \"hsla(166, 44%, 65%, 1)\",\r\n                           1000000,\r\n                           \"hsla(186, 53%, 51%, 1)\",\r\n                           2000000,\r\n                           \"hsla(197, 74%, 43%, 1)\",\r\n                           11847635,\r\n                           \"hsla(197, 74%, 43%, 1)\"\r\n                          ]\r\n\r\n\r\n\r\n//// Import Africapolis agglomerations from mapbox\r\n    map.on('load', function() {\r\n      map.addSource(\r\n        'africapolis_agglos',\r\n      {\r\n        type: 'vector',\r\n        url: 'mapbox://mkmd.10cgedso'\r\n      }\r\n    );\r\n\r\n      map.addLayer({\r\n        id: 'agglomerations',\r\n        source:'africapolis_agglos',\r\n        type: 'circle',\r\n        'source-layer':'africapolis2020-1jc3vn',\r\n        filter:[\">\",\"Population_2015\",0],\r\n        paint: {\r\n       'circle-stroke-color': agglomeration_stroke_color,\r\n       'circle-stroke-width': 3,\r\n       'circle-color': agglomeration_fill_color\r\n        }\r\n      });\r\n    });\r\n////\r\n\r\nfunction remove(obj) {map.removeLayer(obj)}\r\n\r\nfunction add_country(obj,country) { map.addLayer({\r\n  id: 'agglomerations',\r\n  source:'africapolis_agglos',\r\n  type: 'circle',\r\n  'source-layer':'africapolis2020-1jc3vn',\r\n  filter:[\"==\",\"ISO3\",country],\r\n  paint: {\r\n 'circle-stroke-color': agglomeration_stroke_color,\r\n 'circle-stroke-width': 3,\r\n 'circle-color': agglomeration_fill_color\r\n  }\r\n});\r\n}\r\n//remove('agglomerations')\r\n//add_country('agglomerations','NER')\r\n}\r\n\r\n\r\n\r\nstate = {\r\n  selectedOption: null,\r\n};\r\nhandleChange = selectedOption => {\r\n  this.setState(\r\n    { selectedOption },\r\n    () => {\r\n      // remove('agglomerations')\r\n      // add_country('agglomerations',this.state.selectedOption)\r\n      console.log(`Option selected:`, this.state.selectedOption)\r\n\r\n\r\n    }\r\n  );\r\n  }\r\n\r\n  render() {\r\n    const { selectedOption } = this.state;\r\n    const options = [{\r\n  \"Angola\":\"AGO\",\r\n  \"Burundi\":\"BDI\",\r\n  \"Benin\":\"BEN\",\r\n  \"Burkina Faso\":\"BFA\",\r\n  \"Botswana\":\"BWA\",\r\n  \"Central African Republic\":\"CAF\",\r\n  \"Cote d`Ivoire\":\"CIV\",\r\n  \"Cameroon\":\"CMR\",\r\n  \"Democratic Republic of the Congo\":\"COD\",\r\n  \"Republic of the Congo\":\"COG\",\r\n  \"Cabo Verde\":\"CPV\",\r\n  \"Djibouti\":\"DJI\",\r\n  \"Algeria\":\"DZA\",\r\n  \"Egypt\":\"EGY\",\r\n  \"Eritrea\":\"ERI\",\r\n  \"Ethiopia\":\"ETH\",\r\n  \"Gabon\":\"GAB\",\r\n  \"Ghana\":\"GHA\",\r\n  \"Guinea\":\"GIN\",\r\n  \"The Gambia\":\"GMB\",\r\n  \"Guinea-Bissau\":\"GNB\",\r\n  \"Equatorial Guinea\":\"GNQ\",\r\n  \"Kenya\":\"KEN\",\r\n  \"Liberia\":\"LBR\",\r\n  \"Libya\":\"LBY\",\r\n  \"Lesotho\":\"LSO\",\r\n  \"Morocco\":\"MAR\",\r\n  \"Mali\":\"MLI\",\r\n  \"Mozambique\":\"MOZ\",\r\n  \"Mauritania\":\"MRT\",\r\n  \"Malawi\":\"MWI\",\r\n  \"Namibia\":\"NAM\",\r\n  \"Niger\":\"NER\",\r\n  \"Nigeria\":\"NGA\",\r\n  \"Rwanda\":\"RWA\",\r\n  \"Sudan\":\"SDN\",\r\n  \"Senegal\":\"SEN\",\r\n  \"Sierra Leone\":\"SLE\",\r\n  \"Somalia\":\"SOM\",\r\n  \"South Sudan\":\"SSD\",\r\n  \"Sao Tome and Principe\":\"STP\",\r\n  \"Kingdom of Eswatini\":\"SWZ\",\r\n  \"Chad\":\"TCD\",\r\n  \"Togo\":\"TGO\",\r\n  \"Tunisia\":\"TUN\",\r\n  \"Tanzania\":\"TZA\",\r\n  \"Uganda\":\"UGA\",\r\n  \"South Africa\":\"ZAF\",\r\n  \"Zambia\":\"ZMB\",\r\n  \"Zimbabwe\":\"ZWE\"\r\n}];\r\n    return (\r\n      <div>\r\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\" >\r\n        <Select\r\n                value={selectedOption}\r\n                onChange={this.handleChange}\r\n                options={options}\r\n              />\r\n                </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nReactDOM.render(<Application />, document.getElementById('app'));\r\n"]},"metadata":{},"sourceType":"module"}