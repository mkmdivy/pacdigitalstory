{"ast":null,"code":"var _jsxFileName = \"C:\\\\worldbank\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport Select from 'react-select';\nimport './index.css';\nimport greendb from './greendb.json';\nimport wordlist from './wordlist.json';\n\nconst App = props => {\n  function foo(array) {\n    let a = [],\n        b = [],\n        arr = [...array],\n        // clone array so we don't change the original when using .sort()\n    prev;\n    arr.sort();\n\n    for (let element of arr) {\n      if (element !== prev) {\n        a.push(element);\n        b.push(1);\n      } else ++b[b.length - 1];\n\n      prev = element;\n    }\n\n    return [a, b];\n  } // +\"  \"+e.freq\n\n\n  const options = [];\n  const wordcount = [];\n  const wordAvoid = [\"THE\", \"OF\", \"IN\", \"AND\", \"TO\", \"FOR\", \"A\", \"IS\", \"WITH\", \"ON\", \"FROM\", \"-\", \"USING\", \"HOW\", \"BY\", \"NEW\", \"INTO\", \"AN\", \"&\", \"WHAT\", \"ABOUT\", 2020, \"ARE\", \"AT\", \"IT\", \"CHANGE\", \"FIRST\", 10, \"WORLD?????S\", \"USE\", \"OVER\", \"HAS\", \"|\", \"ONE\", 2019, \"TIME\", 2050, \"OR\", \"?????\", \":\"];\n  wordlist.map(e => options.push({\n    value: e.name,\n    label: e.name\n  }));\n  greendb.map(e => {\n    e.keyword = e.Name.split(' ');\n    e.keyword.map(x => x in wordAvoid ? null : wordcount.push(x));\n  }); // console.log(wordcount)\n\n  const result = foo(wordcount);\n  console.log('[' + result[0] + ']', '[' + result[1] + ']');\n  console.log(options);\n  const [selectedOption, setSelectedOption] = useState('Korea');\n  console.log(selectedOption);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    options: options // isMulti \n    ,\n    value: selectedOption,\n    onChange: setSelectedOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setSelectedOption({\n      value: \"Korea\",\n      label: \"Korea\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 1\n    }\n  }, \"Korea\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => console.log(\"KOREA\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 1\n    }\n  }, \"Korea\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/worldbank/src/App.js"],"names":["React","useState","useRef","useEffect","Select","greendb","wordlist","App","props","foo","array","a","b","arr","prev","sort","element","push","length","options","wordcount","wordAvoid","map","e","value","name","label","keyword","Name","split","x","result","console","log","selectedOption","setSelectedOption"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Select from 'react-select'\r\nimport './index.css';\r\nimport greendb from './greendb.json';\r\nimport wordlist from './wordlist.json';\r\n\r\n\r\n\r\nconst App = props => {\r\n\r\nfunction foo (array) {\r\n  let a = [],\r\n    b = [],\r\n    arr = [...array], // clone array so we don't change the original when using .sort()\r\n    prev;\r\n\r\n  arr.sort();\r\n  for (let element of arr) {\r\n    if (element !== prev) {\r\n      a.push(element);\r\n      b.push(1);\r\n    }\r\n    else ++b[b.length - 1];\r\n    prev = element;\r\n  }\r\n\r\n  return [a, b];\r\n}\r\n  \r\n  // +\"  \"+e.freq\r\nconst options = []\r\nconst wordcount = []\r\nconst wordAvoid = [\"THE\",\"OF\",\"IN\",\"AND\",\"TO\",\"FOR\",\"A\",\"IS\",\"WITH\",\"ON\",\"FROM\",\"-\",\"USING\",\"HOW\",\"BY\",\"NEW\",\"INTO\",\"AN\",\"&\",\"WHAT\",\"ABOUT\",2020,\"ARE\",\"AT\",\"IT\",\"CHANGE\",\"FIRST\",10,\"WORLD?????S\",\"USE\",\"OVER\",\"HAS\",\"|\",\"ONE\",2019,\"TIME\",2050,\"OR\",\"?????\",\":\"]\r\nwordlist.map(e => options.push({value: e.name, label: e.name}))\r\ngreendb.map(e => {\r\n  e.keyword=e.Name.split(' ')\r\n  e.keyword.map(x => x in wordAvoid? null : wordcount.push(x))    \r\n})\r\n// console.log(wordcount)\r\n\r\nconst result = foo(wordcount);\r\nconsole.log('[' + result[0] + ']','[' + result[1] + ']')\r\n\r\n\r\n\r\nconsole.log(options)\r\n\r\n\r\nconst [selectedOption, setSelectedOption] = useState('Korea');\r\nconsole.log(selectedOption)\r\n\r\n\r\n\r\n  \r\nreturn (\r\n<div>\r\n<Select \r\noptions={options} \r\n// isMulti \r\nvalue={selectedOption}\r\nonChange={setSelectedOption}\r\n/>\r\n<button onClick={()=> setSelectedOption({value:\"Korea\",label:\"Korea\"})}>Korea</button>\r\n<button onClick={()=> console.log(\"KOREA\")}>Korea</button>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}