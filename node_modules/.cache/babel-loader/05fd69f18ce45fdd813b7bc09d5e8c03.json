{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar canDefineProperty = require('./canDefineProperty');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar lowPriorityWarning = require('./lowPriorityWarning');\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\n\n\nfunction ReactComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nReactComponent.prototype.isReactComponent = {};\n/**\r\n * Sets a subset of the state. Always use this to mutate\r\n * state. You should treat `this.state` as immutable.\r\n *\r\n * There is no guarantee that `this.state` will be immediately updated, so\r\n * accessing `this.state` after calling this method may return the old value.\r\n *\r\n * There is no guarantee that calls to `setState` will run synchronously,\r\n * as they may eventually be batched together.  You can provide an optional\r\n * callback that will be executed when the call to setState is actually\r\n * completed.\r\n *\r\n * When a function is provided to setState, it will be called at some point in\r\n * the future (not synchronously). It will be called with the up to date\r\n * component arguments (state, props, context). These values can be different\r\n * from this.* because your function may be called after receiveProps but before\r\n * shouldComponentUpdate, and this new state, props, and context will not yet be\r\n * assigned to this.\r\n *\r\n * @param {object|function} partialState Next partial state or function to\r\n *        produce next partial state to be merged with current state.\r\n * @param {?function} callback Called after state is updated.\r\n * @final\r\n * @protected\r\n */\n\nReactComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\n  this.updater.enqueueSetState(this, partialState);\n\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'setState');\n  }\n};\n/**\r\n * Forces an update. This should only be invoked when it is known with\r\n * certainty that we are **not** in a DOM transaction.\r\n *\r\n * You may want to call this when you know that some deeper aspect of the\r\n * component's state has changed but `setState` was not called.\r\n *\r\n * This will not invoke `shouldComponentUpdate`, but it will invoke\r\n * `componentWillUpdate` and `componentDidUpdate`.\r\n *\r\n * @param {?function} callback Called after update is complete.\r\n * @final\r\n * @protected\r\n */\n\n\nReactComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this);\n\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');\n  }\n};\n/**\r\n * Deprecated APIs. These APIs used to exist on classic React classes but since\r\n * we would like to deprecate them, we're not going to move them over to this\r\n * modern base class. Instead, we define a getter that warns if it's accessed.\r\n */\n\n\nif (process.env.NODE_ENV !== 'production') {\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    if (canDefineProperty) {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n          return undefined;\n        }\n      });\n    }\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\n\n\nfunction ReactPureComponent(props, context, updater) {\n  // Duplicated from ReactComponent.\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = ReactComponent.prototype;\nReactPureComponent.prototype = new ComponentDummy();\nReactPureComponent.prototype.constructor = ReactPureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(ReactPureComponent.prototype, ReactComponent.prototype);\n\nReactPureComponent.prototype.isPureReactComponent = true;\nmodule.exports = {\n  Component: ReactComponent,\n  PureComponent: ReactPureComponent\n};","map":{"version":3,"sources":["C:/mapbox_africapolis/node_modules/material-icons-react/node_modules/react/lib/ReactBaseClasses.js"],"names":["_prodInvariant","require","_assign","ReactNoopUpdateQueue","canDefineProperty","emptyObject","invariant","lowPriorityWarning","ReactComponent","props","context","updater","refs","prototype","isReactComponent","setState","partialState","callback","process","env","NODE_ENV","enqueueSetState","enqueueCallback","forceUpdate","enqueueForceUpdate","deprecatedAPIs","isMounted","replaceState","defineDeprecationWarning","methodName","info","Object","defineProperty","get","undefined","fnName","hasOwnProperty","ReactPureComponent","ComponentDummy","constructor","isPureReactComponent","module","exports","Component","PureComponent"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;AAAA,IACIC,OAAO,GAAGD,OAAO,CAAC,eAAD,CADrB;;AAGA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIM,kBAAkB,GAAGN,OAAO,CAAC,sBAAD,CAAhC;AAEA;;;;;AAGA,SAASO,cAAT,CAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,OAAxC,EAAiD;AAC/C,OAAKF,KAAL,GAAaA,KAAb;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKE,IAAL,GAAYP,WAAZ,CAH+C,CAI/C;AACA;;AACA,OAAKM,OAAL,GAAeA,OAAO,IAAIR,oBAA1B;AACD;;AAEDK,cAAc,CAACK,SAAf,CAAyBC,gBAAzB,GAA4C,EAA5C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAN,cAAc,CAACK,SAAf,CAAyBE,QAAzB,GAAoC,UAAUC,YAAV,EAAwBC,QAAxB,EAAkC;AACpE,IAAE,OAAOD,YAAP,KAAwB,QAAxB,IAAoC,OAAOA,YAAP,KAAwB,UAA5D,IAA0EA,YAAY,IAAI,IAA5F,IAAoGE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,SAAS,CAAC,KAAD,EAAQ,uHAAR,CAAjD,GAAoLN,cAAc,CAAC,IAAD,CAAtS,GAA+S,KAAK,CAApT;AACA,OAAKW,OAAL,CAAaU,eAAb,CAA6B,IAA7B,EAAmCL,YAAnC;;AACA,MAAIC,QAAJ,EAAc;AACZ,SAAKN,OAAL,CAAaW,eAAb,CAA6B,IAA7B,EAAmCL,QAAnC,EAA6C,UAA7C;AACD;AACF,CAND;AAQA;;;;;;;;;;;;;;;;AAcAT,cAAc,CAACK,SAAf,CAAyBU,WAAzB,GAAuC,UAAUN,QAAV,EAAoB;AACzD,OAAKN,OAAL,CAAaa,kBAAb,CAAgC,IAAhC;;AACA,MAAIP,QAAJ,EAAc;AACZ,SAAKN,OAAL,CAAaW,eAAb,CAA6B,IAA7B,EAAmCL,QAAnC,EAA6C,aAA7C;AACD;AACF,CALD;AAOA;;;;;;;AAKA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAIK,cAAc,GAAG;AACnBC,IAAAA,SAAS,EAAE,CAAC,WAAD,EAAc,0EAA0E,+CAAxF,CADQ;AAEnBC,IAAAA,YAAY,EAAE,CAAC,cAAD,EAAiB,qDAAqD,iDAAtE;AAFK,GAArB;;AAIA,MAAIC,wBAAwB,GAAG,UAAUC,UAAV,EAAsBC,IAAtB,EAA4B;AACzD,QAAI1B,iBAAJ,EAAuB;AACrB2B,MAAAA,MAAM,CAACC,cAAP,CAAsBxB,cAAc,CAACK,SAArC,EAAgDgB,UAAhD,EAA4D;AAC1DI,QAAAA,GAAG,EAAE,YAAY;AACf1B,UAAAA,kBAAkB,CAAC,KAAD,EAAQ,6DAAR,EAAuEuB,IAAI,CAAC,CAAD,CAA3E,EAAgFA,IAAI,CAAC,CAAD,CAApF,CAAlB;AACA,iBAAOI,SAAP;AACD;AAJyD,OAA5D;AAMD;AACF,GATD;;AAUA,OAAK,IAAIC,MAAT,IAAmBV,cAAnB,EAAmC;AACjC,QAAIA,cAAc,CAACW,cAAf,CAA8BD,MAA9B,CAAJ,EAA2C;AACzCP,MAAAA,wBAAwB,CAACO,MAAD,EAASV,cAAc,CAACU,MAAD,CAAvB,CAAxB;AACD;AACF;AACF;AAED;;;;;AAGA,SAASE,kBAAT,CAA4B5B,KAA5B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqD;AACnD;AACA,OAAKF,KAAL,GAAaA,KAAb;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKE,IAAL,GAAYP,WAAZ,CAJmD,CAKnD;AACA;;AACA,OAAKM,OAAL,GAAeA,OAAO,IAAIR,oBAA1B;AACD;;AAED,SAASmC,cAAT,GAA0B,CAAE;;AAC5BA,cAAc,CAACzB,SAAf,GAA2BL,cAAc,CAACK,SAA1C;AACAwB,kBAAkB,CAACxB,SAAnB,GAA+B,IAAIyB,cAAJ,EAA/B;AACAD,kBAAkB,CAACxB,SAAnB,CAA6B0B,WAA7B,GAA2CF,kBAA3C,C,CACA;;AACAnC,OAAO,CAACmC,kBAAkB,CAACxB,SAApB,EAA+BL,cAAc,CAACK,SAA9C,CAAP;;AACAwB,kBAAkB,CAACxB,SAAnB,CAA6B2B,oBAA7B,GAAoD,IAApD;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,SAAS,EAAEnC,cADI;AAEfoC,EAAAA,aAAa,EAAEP;AAFA,CAAjB","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nvar _prodInvariant = require('./reactProdInvariant'),\r\n    _assign = require('object-assign');\r\n\r\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\r\n\r\nvar canDefineProperty = require('./canDefineProperty');\r\nvar emptyObject = require('fbjs/lib/emptyObject');\r\nvar invariant = require('fbjs/lib/invariant');\r\nvar lowPriorityWarning = require('./lowPriorityWarning');\r\n\r\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\r\nfunction ReactComponent(props, context, updater) {\r\n  this.props = props;\r\n  this.context = context;\r\n  this.refs = emptyObject;\r\n  // We initialize the default updater but the real one gets injected by the\r\n  // renderer.\r\n  this.updater = updater || ReactNoopUpdateQueue;\r\n}\r\n\r\nReactComponent.prototype.isReactComponent = {};\r\n\r\n/**\r\n * Sets a subset of the state. Always use this to mutate\r\n * state. You should treat `this.state` as immutable.\r\n *\r\n * There is no guarantee that `this.state` will be immediately updated, so\r\n * accessing `this.state` after calling this method may return the old value.\r\n *\r\n * There is no guarantee that calls to `setState` will run synchronously,\r\n * as they may eventually be batched together.  You can provide an optional\r\n * callback that will be executed when the call to setState is actually\r\n * completed.\r\n *\r\n * When a function is provided to setState, it will be called at some point in\r\n * the future (not synchronously). It will be called with the up to date\r\n * component arguments (state, props, context). These values can be different\r\n * from this.* because your function may be called after receiveProps but before\r\n * shouldComponentUpdate, and this new state, props, and context will not yet be\r\n * assigned to this.\r\n *\r\n * @param {object|function} partialState Next partial state or function to\r\n *        produce next partial state to be merged with current state.\r\n * @param {?function} callback Called after state is updated.\r\n * @final\r\n * @protected\r\n */\r\nReactComponent.prototype.setState = function (partialState, callback) {\r\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\r\n  this.updater.enqueueSetState(this, partialState);\r\n  if (callback) {\r\n    this.updater.enqueueCallback(this, callback, 'setState');\r\n  }\r\n};\r\n\r\n/**\r\n * Forces an update. This should only be invoked when it is known with\r\n * certainty that we are **not** in a DOM transaction.\r\n *\r\n * You may want to call this when you know that some deeper aspect of the\r\n * component's state has changed but `setState` was not called.\r\n *\r\n * This will not invoke `shouldComponentUpdate`, but it will invoke\r\n * `componentWillUpdate` and `componentDidUpdate`.\r\n *\r\n * @param {?function} callback Called after update is complete.\r\n * @final\r\n * @protected\r\n */\r\nReactComponent.prototype.forceUpdate = function (callback) {\r\n  this.updater.enqueueForceUpdate(this);\r\n  if (callback) {\r\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');\r\n  }\r\n};\r\n\r\n/**\r\n * Deprecated APIs. These APIs used to exist on classic React classes but since\r\n * we would like to deprecate them, we're not going to move them over to this\r\n * modern base class. Instead, we define a getter that warns if it's accessed.\r\n */\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var deprecatedAPIs = {\r\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\r\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\r\n  };\r\n  var defineDeprecationWarning = function (methodName, info) {\r\n    if (canDefineProperty) {\r\n      Object.defineProperty(ReactComponent.prototype, methodName, {\r\n        get: function () {\r\n          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\r\n          return undefined;\r\n        }\r\n      });\r\n    }\r\n  };\r\n  for (var fnName in deprecatedAPIs) {\r\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\r\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\r\nfunction ReactPureComponent(props, context, updater) {\r\n  // Duplicated from ReactComponent.\r\n  this.props = props;\r\n  this.context = context;\r\n  this.refs = emptyObject;\r\n  // We initialize the default updater but the real one gets injected by the\r\n  // renderer.\r\n  this.updater = updater || ReactNoopUpdateQueue;\r\n}\r\n\r\nfunction ComponentDummy() {}\r\nComponentDummy.prototype = ReactComponent.prototype;\r\nReactPureComponent.prototype = new ComponentDummy();\r\nReactPureComponent.prototype.constructor = ReactPureComponent;\r\n// Avoid an extra prototype jump for these methods.\r\n_assign(ReactPureComponent.prototype, ReactComponent.prototype);\r\nReactPureComponent.prototype.isPureReactComponent = true;\r\n\r\nmodule.exports = {\r\n  Component: ReactComponent,\r\n  PureComponent: ReactPureComponent\r\n};"]},"metadata":{},"sourceType":"script"}