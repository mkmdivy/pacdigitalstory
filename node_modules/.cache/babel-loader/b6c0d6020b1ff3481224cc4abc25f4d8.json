{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\n\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar warning = require('fbjs/lib/warning');\n\nvar ReactComponentTreeHook;\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\n}\n\nvar loggedTypeFailures = {};\n/**\r\n * Assert that the values match with the type specs.\r\n * Error messages are memorized and will only be shown once.\r\n *\r\n * @param {object} typeSpecs Map of name to a ReactPropType\r\n * @param {object} values Runtime values that need to be type-checked\r\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\r\n * @param {string} componentName Name of the component for error messages.\r\n * @param {?object} element The React element that is being type-checked\r\n * @param {?number} debugID The React component instance that is being type-checked\r\n * @private\r\n */\n\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error; // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {\n        error = ex;\n      }\n\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n        var componentStackInfo = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!ReactComponentTreeHook) {\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');\n          }\n\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\n          }\n        }\n\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\n\nmodule.exports = checkReactTypeSpec;","map":{"version":3,"sources":["C:/inhoiproject/node_modules/material-icons-react/node_modules/react/lib/checkReactTypeSpec.js"],"names":["_prodInvariant","require","ReactPropTypeLocationNames","ReactPropTypesSecret","invariant","warning","ReactComponentTreeHook","process","env","NODE_ENV","loggedTypeFailures","checkReactTypeSpec","typeSpecs","values","location","componentName","element","debugID","typeSpecName","hasOwnProperty","error","ex","Error","message","componentStackInfo","getStackAddendumByID","getCurrentStackAddendum","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AAEA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIK,sBAAJ;;AAEA,IAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACC,GAA1C,IAAiDD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA9E,EAAsF;AACpF;AACA;AACA;AACA;AACA;AACAH,EAAAA,sBAAsB,GAAGL,OAAO,CAAC,0BAAD,CAAhC;AACD;;AAED,IAAIS,kBAAkB,GAAG,EAAzB;AAEA;;;;;;;;;;;;;AAYA,SAASC,kBAAT,CAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,QAA/C,EAAyDC,aAAzD,EAAwEC,OAAxE,EAAiFC,OAAjF,EAA0F;AACxF,OAAK,IAAIC,YAAT,IAAyBN,SAAzB,EAAoC;AAClC,QAAIA,SAAS,CAACO,cAAV,CAAyBD,YAAzB,CAAJ,EAA4C;AAC1C,UAAIE,KAAJ,CAD0C,CAE1C;AACA;AACA;;AACA,UAAI;AACF;AACA;AACA,UAAE,OAAOR,SAAS,CAACM,YAAD,CAAhB,KAAmC,UAArC,IAAmDX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCL,SAAS,CAAC,KAAD,EAAQ,mFAAR,EAA6FW,aAAa,IAAI,aAA9G,EAA6Hb,0BAA0B,CAACY,QAAD,CAAvJ,EAAmKI,YAAnK,CAAjD,GAAoOlB,cAAc,CAAC,IAAD,EAAOe,aAAa,IAAI,aAAxB,EAAuCb,0BAA0B,CAACY,QAAD,CAAjE,EAA6EI,YAA7E,CAArS,GAAkY,KAAK,CAAvY;AACAE,QAAAA,KAAK,GAAGR,SAAS,CAACM,YAAD,CAAT,CAAwBL,MAAxB,EAAgCK,YAAhC,EAA8CH,aAA9C,EAA6DD,QAA7D,EAAuE,IAAvE,EAA6EX,oBAA7E,CAAR;AACD,OALD,CAKE,OAAOkB,EAAP,EAAW;AACXD,QAAAA,KAAK,GAAGC,EAAR;AACD;;AACDd,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCJ,OAAO,CAAC,CAACe,KAAD,IAAUA,KAAK,YAAYE,KAA5B,EAAmC,oEAAoE,+DAApE,GAAsI,iEAAtI,GAA0M,gEAA1M,GAA6Q,iCAAhT,EAAmVP,aAAa,IAAI,aAApW,EAAmXb,0BAA0B,CAACY,QAAD,CAA7Y,EAAyZI,YAAzZ,EAAua,OAAOE,KAA9a,CAA/C,GAAse,KAAK,CAA3e;;AACA,UAAIA,KAAK,YAAYE,KAAjB,IAA0B,EAAEF,KAAK,CAACG,OAAN,IAAiBb,kBAAnB,CAA9B,EAAsE;AACpE;AACA;AACAA,QAAAA,kBAAkB,CAACU,KAAK,CAACG,OAAP,CAAlB,GAAoC,IAApC;AAEA,YAAIC,kBAAkB,GAAG,EAAzB;;AAEA,YAAIjB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,cAAI,CAACH,sBAAL,EAA6B;AAC3BA,YAAAA,sBAAsB,GAAGL,OAAO,CAAC,0BAAD,CAAhC;AACD;;AACD,cAAIgB,OAAO,KAAK,IAAhB,EAAsB;AACpBO,YAAAA,kBAAkB,GAAGlB,sBAAsB,CAACmB,oBAAvB,CAA4CR,OAA5C,CAArB;AACD,WAFD,MAEO,IAAID,OAAO,KAAK,IAAhB,EAAsB;AAC3BQ,YAAAA,kBAAkB,GAAGlB,sBAAsB,CAACoB,uBAAvB,CAA+CV,OAA/C,CAArB;AACD;AACF;;AAEDT,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCJ,OAAO,CAAC,KAAD,EAAQ,sBAAR,EAAgCS,QAAhC,EAA0CM,KAAK,CAACG,OAAhD,EAAyDC,kBAAzD,CAA/C,GAA8H,KAAK,CAAnI;AACD;AACF;AACF;AACF;;AAEDG,MAAM,CAACC,OAAP,GAAiBjB,kBAAjB","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nvar _prodInvariant = require('./reactProdInvariant');\r\n\r\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\r\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\nvar warning = require('fbjs/lib/warning');\r\n\r\nvar ReactComponentTreeHook;\r\n\r\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\r\n  // Temporary hack.\r\n  // Inline requires don't work well with Jest:\r\n  // https://github.com/facebook/react/issues/7240\r\n  // Remove the inline requires when we don't need them anymore:\r\n  // https://github.com/facebook/react/pull/7178\r\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\r\n}\r\n\r\nvar loggedTypeFailures = {};\r\n\r\n/**\r\n * Assert that the values match with the type specs.\r\n * Error messages are memorized and will only be shown once.\r\n *\r\n * @param {object} typeSpecs Map of name to a ReactPropType\r\n * @param {object} values Runtime values that need to be type-checked\r\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\r\n * @param {string} componentName Name of the component for error messages.\r\n * @param {?object} element The React element that is being type-checked\r\n * @param {?number} debugID The React component instance that is being type-checked\r\n * @private\r\n */\r\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\r\n  for (var typeSpecName in typeSpecs) {\r\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\r\n      var error;\r\n      // Prop type validation may throw. In case they do, we don't want to\r\n      // fail the render phase where it didn't fail before. So we log it.\r\n      // After these have been cleaned up, we'll let them throw.\r\n      try {\r\n        // This is intentionally an invariant that gets caught. It's the same\r\n        // behavior as without this statement except with a better message.\r\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\r\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\r\n      } catch (ex) {\r\n        error = ex;\r\n      }\r\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\r\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\r\n        // Only monitor this failure once because there tends to be a lot of the\r\n        // same error.\r\n        loggedTypeFailures[error.message] = true;\r\n\r\n        var componentStackInfo = '';\r\n\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (!ReactComponentTreeHook) {\r\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');\r\n          }\r\n          if (debugID !== null) {\r\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\r\n          } else if (element !== null) {\r\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\r\n          }\r\n        }\r\n\r\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = checkReactTypeSpec;"]},"metadata":{},"sourceType":"script"}